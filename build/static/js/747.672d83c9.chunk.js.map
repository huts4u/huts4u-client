{"version":3,"file":"static/js/747.672d83c9.chunk.js","mappings":"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","sources":["components/data.tsx","components/style.tsx","components/ImageUploader.tsx","pages/Hotel/PropertyForm.tsx"],"sourcesContent":["import AcUnitIcon from \"@mui/icons-material/AcUnit\";\r\nimport AirportShuttleIcon from \"@mui/icons-material/AirportShuttle\";\r\nimport BeachAccessIcon from \"@mui/icons-material/BeachAccess\";\r\nimport BusinessCenterIcon from \"@mui/icons-material/BusinessCenter\";\r\nimport CasinoIcon from \"@mui/icons-material/Casino\";\r\nimport ChildCareIcon from \"@mui/icons-material/ChildCare\";\r\nimport DirectionsCarIcon from \"@mui/icons-material/DirectionsCar\";\r\nimport FireExtinguisherIcon from \"@mui/icons-material/FireExtinguisher\";\r\nimport FitnessCenterIcon from \"@mui/icons-material/FitnessCenter\";\r\nimport FreeBreakfastIcon from \"@mui/icons-material/FreeBreakfast\";\r\nimport KingBedIcon from \"@mui/icons-material/KingBed\";\r\nimport LocalBarIcon from \"@mui/icons-material/LocalBar\";\r\nimport LocalDiningIcon from \"@mui/icons-material/LocalDining\";\r\nimport LocalLaundryServiceIcon from \"@mui/icons-material/LocalLaundryService\";\r\nimport LocalParkingIcon from \"@mui/icons-material/LocalParking\";\r\nimport NightlifeIcon from \"@mui/icons-material/Nightlife\";\r\nimport OutdoorGrillIcon from \"@mui/icons-material/OutdoorGrill\";\r\nimport PetsIcon from \"@mui/icons-material/Pets\";\r\nimport PoolIcon from \"@mui/icons-material/Pool\";\r\nimport RoomServiceIcon from \"@mui/icons-material/RoomService\";\r\nimport SpaIcon from \"@mui/icons-material/Spa\";\r\nimport SportsTennisIcon from \"@mui/icons-material/SportsTennis\";\r\nimport TvIcon from \"@mui/icons-material/Tv\";\r\nimport WifiIcon from \"@mui/icons-material/Wifi\";\r\n\r\nexport const amenityIcons: { [key: string]: JSX.Element } = {\r\n  \"Swimming Pool\": <PoolIcon fontSize=\"small\" />,\r\n  Gym: <FitnessCenterIcon fontSize=\"small\" />,\r\n  \"Free WiFi\": <WifiIcon fontSize=\"small\" />,\r\n  \"Private Beach\": <BeachAccessIcon fontSize=\"small\" />,\r\n  Breakfast: <FreeBreakfastIcon fontSize=\"small\" />,\r\n  Parking: <LocalParkingIcon fontSize=\"small\" />,\r\n  Spa: <SpaIcon fontSize=\"small\" />,\r\n  Restaurant: <LocalDiningIcon fontSize=\"small\" />,\r\n  \"Airport Shuttle\": <AirportShuttleIcon fontSize=\"small\" />,\r\n  \"Business Center\": <BusinessCenterIcon fontSize=\"small\" />,\r\n  \"Pet Friendly\": <PetsIcon fontSize=\"small\" />,\r\n  Bar: <LocalBarIcon fontSize=\"small\" />,\r\n  \"Room Service\": <RoomServiceIcon fontSize=\"small\" />,\r\n  TV: <TvIcon fontSize=\"small\" />,\r\n  \"Air Conditioning\": <AcUnitIcon fontSize=\"small\" />,\r\n  \"Laundry Service\": <LocalLaundryServiceIcon fontSize=\"small\" />,\r\n  \"Child Care\": <ChildCareIcon fontSize=\"small\" />,\r\n  \"King Bed\": <KingBedIcon fontSize=\"small\" />,\r\n  Casino: <CasinoIcon fontSize=\"small\" />,\r\n  \"Car Rental\": <DirectionsCarIcon fontSize=\"small\" />,\r\n  \"Night Club\": <NightlifeIcon fontSize=\"small\" />,\r\n  \"Tennis Court\": <SportsTennisIcon fontSize=\"small\" />,\r\n  \"BBQ Facilities\": <OutdoorGrillIcon fontSize=\"small\" />,\r\n  \"Fire Safety\": <FireExtinguisherIcon fontSize=\"small\" />,\r\n};\r\n\r\n\r\nexport const amenitiesOptions = [\r\n  \"Swimming Pool\",\r\n  \"Gym\",\r\n  \"Free WiFi\",\r\n  \"Private Beach\",\r\n  \"Breakfast\",\r\n  \"Parking\",\r\n  \"Spa\",\r\n  \"Restaurant\",\r\n  \"Airport Shuttle\",\r\n  \"Business Center\",\r\n  \"Pet Friendly\",\r\n  \"Bar\",\r\n  \"Room Service\",\r\n  \"TV\",\r\n  \"Air Conditioning\",\r\n  \"Laundry Service\",\r\n  \"Child Care\",\r\n  \"King Bed\",\r\n  \"Casino\",\r\n  \"Car Rental\",\r\n  \"Night Club\",\r\n  \"Tennis Court\",\r\n  \"BBQ Facilities\",\r\n  \"Fire Safety\",\r\n];\r\n\r\n\r\nexport const roomTypes = [\r\n  { value: \"Single Room\", label: \"Single Room\", details: \"A basic room with a single bed, ideal for solo travelers.\" },\r\n  { value: \"Double Room\", label: \"Double Room\", details: \"Comes with a double bed or two single beds, suitable for two people.\" },\r\n  { value: \"Deluxe Room\", label: \"Deluxe Room\", details: \"A more spacious version of a standard room with better furnishings.\" },\r\n  { value: \"Executive Room\", label: \"Executive Room\", details: \"Designed for business travelers with a work desk and extra amenities.\" },\r\n  { value: \"Club Room\", label: \"Club Room\", details: \"Offers premium benefits like lounge access and complimentary breakfast.\" },\r\n  { value: \"Suite Room\", label: \"Suite Room\", details: \"A larger space with a separate living area, ideal for families or business executives.\" },\r\n  { value: \"Presidential Suite\", label: \"Presidential Suite\", details: \"A luxurious option with multiple rooms and high-end services.\" },\r\n  { value: \"Royal Suite\", label: \"Royal Suite\", details: \"Inspired by Indian royalty with grand interiors and luxury amenities.\" },\r\n  { value: \"Heritage Room\", label: \"Heritage Room\", details: \"Traditional decor and antique furnishings, found in heritage hotels.\" },\r\n  { value: \"Cottage/Villa\", label: \"Cottage/Villa\", details: \"Standalone accommodations, often found in resorts with private gardens or pools.\" },\r\n  { value: \"Treehouse Room\", label: \"Treehouse Room\", details: \"Unique elevated rooms, mostly available in nature retreats.\" },\r\n  { value: \"Houseboat Room\", label: \"Houseboat Room\", details: \"Found in Kerala and Kashmir, offering a floating hotel experience.\" },\r\n  { value: \"Studio Apartment\", label: \"Studio Apartment\", details: \"A self-contained unit with a kitchenette, preferred for long stays.\" },\r\n  { value: \"Serviced Apartment\", label: \"Serviced Apartment\", details: \"A fully furnished apartment with hotel-like services.\" },\r\n];","/* eslint-disable jsx-a11y/img-redundant-alt */\r\nimport { ArrowBackIos, ArrowForwardIos, Close, ExpandLess, ExpandMore, FiberManualRecord } from \"@mui/icons-material\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  FormControlLabel,\r\n  Grid,\r\n  IconButton,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Modal,\r\n  Radio,\r\n  RadioProps,\r\n  styled,\r\n  TextField,\r\n  Typography,\r\n  useMediaQuery,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport color from \"./color\";\r\nimport { useState } from \"react\";\r\n\r\nexport const BoxStyle = {\r\n  p: 2,\r\n  px: 4,\r\n  boxShadow: \"0px 0px 20px rgba(0, 0, 0, 0.18)\",\r\n  borderRadius: \"12px\",\r\n  my: 4,\r\n};\r\n\r\nexport function BpRadio(props: RadioProps) {\r\n  return (\r\n    <Radio\r\n      style={{ padding: \"6px\" }}\r\n      disableRipple\r\n      color=\"default\"\r\n      checkedIcon={<BpCheckedIcon />}\r\n      icon={<BpIcon />}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nexport const BpIcon = styled(\"span\")(({ theme }) => ({\r\n  borderRadius: \"50%\",\r\n  width: 18,\r\n  height: 18,\r\n  boxShadow:\r\n    \"inset 0 0 0 1px rgba(16,22,26,.2), inset 0 -1px 0 rgba(16,22,26,.1)\",\r\n  backgroundColor: \"#f5f8fa\",\r\n  backgroundImage:\r\n    \"linear-gradient(180deg,hsla(0,0%,100%,.8),hsla(0,0%,100%,0))\",\r\n  \".Mui-focusVisible &\": {\r\n    outline: \"2px auto rgba(41, 91, 122, 0.6)\",\r\n    outlineOffset: 2,\r\n  },\r\n  \"input:hover ~ &\": {\r\n    backgroundColor: \"#ebf1f5\",\r\n    ...theme.applyStyles(\"dark\", {\r\n      backgroundColor: \"#30404d\",\r\n    }),\r\n  },\r\n  \"input:disabled ~ &\": {\r\n    boxShadow: \"none\",\r\n    background: \"rgba(206,217,224,.5)\",\r\n    ...theme.applyStyles(\"dark\", {\r\n      background: \"rgba(57,75,89,.5)\",\r\n    }),\r\n  },\r\n  ...theme.applyStyles(\"dark\", {\r\n    boxShadow: \"0 0 0 1px rgb(16 22 26 / 40%)\",\r\n    backgroundColor: \"#394b59\",\r\n    backgroundImage:\r\n      \"linear-gradient(180deg,hsla(0,0%,100%,.05),hsla(0,0%,100%,0))\",\r\n  }),\r\n}));\r\n\r\nexport const BpCheckedIcon = styled(BpIcon)({\r\n  backgroundColor: color.secondColor,\r\n  backgroundImage:\r\n    \"linear-gradient(180deg,hsla(0,0%,100%,.1),hsla(0,0%,100%,0))\",\r\n  \"&::before\": {\r\n    display: \"block\",\r\n    width: 18,\r\n    height: 18,\r\n    backgroundImage: \"radial-gradient(#fff,#fff 28%,transparent 32%)\",\r\n    content: '\"\"',\r\n  },\r\n  \"input:hover ~ &\": {\r\n    backgroundColor: color.secondColor,\r\n  },\r\n});\r\n\r\nexport const StyledLabel = styled(FormControlLabel)(\r\n  ({ theme, checked }: { theme?: any; checked?: boolean }) => ({\r\n    color: checked ? color.thirdColor : color.firstColor,\r\n    background: checked\r\n      ? color.firstColor\r\n      : \"transparent\",\r\n    borderRadius: \" 2px 8px 8px 2px\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    transition: \"0.3s\",\r\n    paddingLeft: checked ? \"30px\" : \"auto\",\r\n    marginLeft: checked ? \"-40px\" : \"-10px\",\r\n    paddingRight: \"10px\",\r\n    fontSize: checked ? \"1rem\" : \"0.95rem\",\r\n  })\r\n);\r\n\r\nexport const CustomRadio = styled(Radio)({\r\n  color: color.firstColor,\r\n  \"&.Mui-checked\": {\r\n    color: color.thirdColor,\r\n  },\r\n});\r\n\r\nexport const CustomPrevArrow = (props: any) => {\r\n  const { onClick } = props;\r\n  return (\r\n    <IconButton\r\n      onClick={onClick}\r\n      sx={{\r\n        position: \"absolute\",\r\n        left: \"0px\",\r\n        top: \"50%\",\r\n        transform: \"translateY(-50%)\",\r\n        background: color.background,\r\n        color: \"white\",\r\n        zIndex: 2,\r\n        \"&:hover\": { background: color.firstColor },\r\n      }}\r\n    >\r\n      <ArrowBackIos />\r\n    </IconButton>\r\n  );\r\n};\r\n\r\nexport const CustomNextArrow = (props: any) => {\r\n  const { onClick } = props;\r\n  return (\r\n    <IconButton\r\n      onClick={onClick}\r\n      sx={{\r\n        position: \"absolute\",\r\n        right: \"0px\",\r\n        top: \"50%\",\r\n        transform: \"translateY(-50%)\",\r\n        background: color.background,\r\n        color: \"white\",\r\n        zIndex: 2,\r\n        \"&:hover\": { background: color.firstColor },\r\n      }}\r\n    >\r\n      <ArrowForwardIos />\r\n    </IconButton>\r\n  );\r\n};\r\n\r\nexport const CustomTextField = styled(TextField)({\r\n  marginBottom: \"10px\",\r\n  \"& .MuiOutlinedInput-root\": {\r\n    \"& fieldset\": {\r\n      border: \"none\",\r\n      borderRadius: \"52px\",\r\n      boxShadow: \"4px 4px 10px rgba(104, 39, 184, 0.17)\",\r\n      color: color.firstColor,\r\n    },\r\n    \"&:hover fieldset\": {\r\n      border: \"solid 1px\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      border: \"solid 1px\",\r\n    },\r\n  },\r\n  \"& .MuiInputBase-input\": {\r\n    color: color.firstColor,\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: color.firstColor,\r\n  },\r\n  \"& .MuiInputLabel-root.Mui-focused\": {\r\n    color: color.firstColor,\r\n  },\r\n});\r\n\r\nexport const LoginTextField = styled(TextField)({\r\n  marginBottom: \"20px\",\r\n  \"& .MuiOutlinedInput-root\": {\r\n    \"& fieldset\": {\r\n      border: \"solid 1px white\",\r\n      boxShadow: \"-4px -4px 10px rgba(255, 255, 255, 0.36) inset\",\r\n      color: \"white\",\r\n      borderRadius: \"12px\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      border: \"solid 1px\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      border: \"solid 1px\",\r\n    },\r\n  },\r\n  \"& .MuiInputBase-input\": {\r\n    color: \"white\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"white\",\r\n  },\r\n  \"& .MuiInputLabel-root.Mui-focused\": {\r\n    color: \"white\",\r\n  },\r\n});\r\n\r\nexport const useScreenSize = () => {\r\n  const theme = useTheme();\r\n  const isBelow400px = useMediaQuery(theme.breakpoints.down(400));\r\n  return { isBelow400px };\r\n};\r\n\r\nexport const inputSx = {\r\n  border: \"none\",\r\n  borderRadius: \"52px\",\r\n  boxShadow: \"4px 4px 10px rgba(104, 39, 184, 0.17)\",\r\n  color: color.firstColor,\r\n  padding: \"0px\",\r\n  marginTop: \"0px\",\r\n  width: \"100%\",\r\n  boxSizing: \"border-box\",\r\n  \"& .MuiOutlinedInput-root\": {\r\n    padding: \"0px\",\r\n    borderBottom: \"4px solid\",\r\n    borderColor: color.firstColor,\r\n    \"& fieldset\": {\r\n      border: \"none\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      border: \"none\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      border: \"none\",\r\n    },\r\n    \"& .MuiInputLabel-root\": {\r\n      color: color.firstColor,\r\n    },\r\n  },\r\n};\r\n\r\n\r\ninterface ImageGridProps {\r\n  propertyImages: string[];\r\n}\r\n\r\nexport const ImageGrid: React.FC<ImageGridProps> = ({ propertyImages }) => {\r\n  const maxImages = Math.min(propertyImages.length, 7);\r\n  const displayImages = propertyImages.slice(0, maxImages);\r\n  const hasMore = propertyImages.length > 7;\r\n  const [open, setOpen] = useState(false);\r\n  const isMobile = useMediaQuery(\"(max-width: 900px)\");\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: { xs: \"block\", md: \"grid\" },\r\n        gap: { xs: 0, md: 1 },\r\n        width: \"100%\",\r\n        height: \"300px\",\r\n        gridTemplateColumns:\r\n          displayImages.length > 5 ? \"40% 20% 20% 20%\" : \"60% 20% 20%\",\r\n        gridTemplateRows: \"auto\",\r\n        \"& img\": {\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          objectFit: \"cover\",\r\n          borderRadius: \"8px\",\r\n        },\r\n        position: \"relative\",\r\n      }}\r\n    >\r\n      <Box\r\n        onClick={() => setOpen(true)}\r\n        sx={{\r\n          gridColumn: { xs: \"auto\", md: \"span 1\" },\r\n          gridRow: { xs: \"auto\", md: \"span 2\" },\r\n          height: \"300px\",\r\n          width: { xs: \"100%\", md: \"auto\" },\r\n          display: { xs: \"block\", md: \"grid\" },\r\n        }}\r\n      >\r\n        <img style={{height:'300px'}} src={displayImages[0]} alt=\"Main\" />\r\n      </Box>\r\n\r\n      {!isMobile &&\r\n        displayImages.slice(1).map((src, index) => {\r\n          if (index % 2 === 0) {\r\n            return (\r\n              <Box\r\n                onClick={() => setOpen(true)}\r\n                key={index}\r\n                display=\"grid\"\r\n                sx={{\r\n                  gridTemplateRows: \"146px 146px\",\r\n                  height: \"300px\",\r\n                  gap: \"8px\",\r\n                }}\r\n              >\r\n                <img\r\n                  src={src}\r\n                  alt={`Image ${index + 2}`}\r\n                  style={{ height: \"100%\", width: \"100%\", objectFit: \"cover\" }}\r\n                />\r\n\r\n                {displayImages[index + 2] && (\r\n                  <img\r\n                    src={displayImages[index + 2]}\r\n                    alt={`Image ${index + 3}`}\r\n                    style={{\r\n                      height: \"100%\",\r\n                      width: \"100%\",\r\n                      objectFit: \"cover\",\r\n                    }}\r\n                  />\r\n                )}\r\n              </Box>\r\n            );\r\n          }\r\n          return null;\r\n        })}\r\n\r\n      {hasMore && (\r\n        <Box\r\n          sx={{\r\n            position: \"absolute\",\r\n            bottom: 10,\r\n            right: 10,\r\n            background: color.background,\r\n            color: \"white\",\r\n            borderRadius: \"8px\",\r\n            p: 1,\r\n            textAlign: \"center\",\r\n            cursor: \"pointer\",\r\n            boxShadow:\r\n              \"-4px -4px 10px rgba(32, 32, 32, 0.28) inset, 0px 0px 10px rgba(32, 32, 32, 0.28)\",\r\n          }}\r\n        >\r\n          <Typography variant=\"body2\">\r\n            + {isMobile ? propertyImages.length - 1 : propertyImages.length - 7} More\r\n          </Typography>\r\n        </Box>\r\n      )}\r\n\r\n      <Modal open={open} onClose={() => setOpen(false)}>\r\n        <Box\r\n          sx={{\r\n            position: \"absolute\",\r\n            top: \"50%\",\r\n            left: \"50%\",\r\n            transform: \"translate(-50%, -50%)\",\r\n            width: \"80%\",\r\n            height: \"80%\",\r\n            bgcolor: \"white\",\r\n            boxShadow: 24,\r\n            p: 2,\r\n            overflowY: \"auto\",\r\n            borderRadius: \"8px\",\r\n          }}\r\n        >\r\n          <Typography variant=\"h6\" textAlign=\"center\" mb={2}>\r\n            All Images\r\n          </Typography>\r\n\r\n          <Close\r\n            onClick={() => setOpen(false)}\r\n            sx={{\r\n              position: \"absolute\",\r\n              top: 10,\r\n              right: 10,\r\n            }}\r\n          ></Close>\r\n          <Box\r\n            display=\"grid\"\r\n            gap={2}\r\n            sx={{\r\n              gridTemplateColumns: \"repeat(auto-fill, minmax(150px, 1fr))\",\r\n            }}\r\n          >\r\n            {propertyImages.map((img, index) => (\r\n              <img\r\n                key={index}\r\n                src={img}\r\n                alt={`Image ${index + 1}`}\r\n                style={{\r\n                  width: \"100%\",\r\n                  height: \"150px\",\r\n                  objectFit: \"cover\",\r\n                  borderRadius: \"8px\",\r\n                }}\r\n              />\r\n            ))}\r\n          </Box>\r\n        </Box>\r\n      </Modal>\r\n    </Box>\r\n  );\r\n};\r\n\r\n\r\n\r\n  \r\nexport const RoomAmenities = ({\r\n  room,\r\n}: {\r\n  room: { propertyName: string; amenities: string[] };\r\n}) => {\r\n  const [showAll, setShowAll] = useState(false);\r\n  const displayedAmenities = showAll\r\n    ? room.amenities\r\n    : room.amenities.slice(0, 6);\r\n  const halfIndex = Math.ceil(displayedAmenities.length / 2);\r\n  const firstColumn = displayedAmenities.slice(0, halfIndex);\r\n  const secondColumn = displayedAmenities.slice(halfIndex);\r\n\r\n  return (\r\n    <>\r\n      <Box sx={{ mt: { xs: 1, md: 0 } }}>\r\n        <Grid container spacing={{ xs: 1, md: 0 }}>\r\n          {[firstColumn, secondColumn].map((column, colIndex) => (\r\n            <Grid item xs={6} md={12} key={colIndex}>\r\n              <List disablePadding>\r\n                {column.map((amenity, index) => {\r\n                  const isLastItem =\r\n                    colIndex === 1 &&\r\n                    index === column.length - 1 &&\r\n                    room.amenities.length > 6;\r\n\r\n                  return (\r\n                    <ListItem\r\n                      key={index}\r\n                      sx={{\r\n                        py: 0.2,\r\n                        px: { xs: 0, md: 2 },\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        flexWrap: \"wrap\",\r\n                      }}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          display: \"flex\",\r\n                          alignItems: \"flex-start\",\r\n                        }}\r\n                      >\r\n                        <ListItemIcon sx={{ minWidth: \"20px\", mt: 0.5 }}>\r\n                          <FiberManualRecord sx={{ fontSize: \"8px\" }} />\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                          style={{ margin: 0 }}\r\n                          primary={amenity}\r\n                          primaryTypographyProps={{\r\n                            style: { fontSize: \"12px\" },\r\n                          }}\r\n                        />\r\n                      </div>\r\n\r\n                      {isLastItem && (\r\n                        <>\r\n                          <Button\r\n                            onClick={() => setShowAll(!showAll)}\r\n                            sx={{\r\n                              textTransform: \"none\",\r\n                              fontSize: \"14px\",\r\n                              ml: \"auto\",\r\n                              p: 0,\r\n                              color: color.firstColor,\r\n                              fontWeight: \"bold\",\r\n                            }}\r\n                          >\r\n                            {showAll ? \"Show Less\" : \"... Show All\"}\r\n                          </Button>\r\n                          {showAll ? <ExpandLess /> : <ExpandMore />}\r\n                        </>\r\n                      )}\r\n                    </ListItem>\r\n                  );\r\n                })}\r\n              </List>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getRatingText = (rating: number) => {\r\n  if (rating >= 4.5) return \"Excellent\";\r\n  if (rating >= 3.5) return \"Good\";\r\n  if (rating >= 2.5) return \"Average\";\r\n  if (rating >= 1.5) return \"Poor\";\r\n  return \"Very Poor\";\r\n};\r\n\r\nexport const getRatingColor = (rating: number) => {\r\n  if (rating >= 4.5) return \"#46b648\";\r\n  if (rating >= 3.5) return \"#b4d137\"; \r\n  if (rating >= 2.5) return \"#fed018\"; \r\n  if (rating >= 1.5) return \"#f7921e\"; \r\n  return \"#e91d26\"; \r\n};","import React, { useCallback, useState } from \"react\";\r\nimport { FileRejection, useDropzone } from \"react-dropzone\";\r\nimport { Box, Typography, IconButton, Alert } from \"@mui/material\";\r\nimport CloudUploadIcon from \"@mui/icons-material/CloudUpload\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\n\r\ninterface ImageUploaderProps {\r\n  label: string;\r\n  onFileSelect: (files: File | File[] | null) => void;\r\n  multiple?: boolean;\r\n  maxFiles?: number;\r\n  maxSize?: number;\r\n}\r\n\r\nconst ImageUploader: React.FC<ImageUploaderProps> = ({\r\n  label,\r\n  onFileSelect,\r\n  multiple = false,\r\n  maxFiles = 1,\r\n  maxSize = 5 * 1024 * 1024,\r\n}) => {\r\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\r\n  const [previews, setPreviews] = useState<string[]>([]);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const handleDrop = useCallback(\r\n    (acceptedFiles: File[], fileRejections: FileRejection[]) => {\r\n      if (fileRejections.length > 0) {\r\n        setError(\"Some files were rejected. Please check size and format.\");\r\n        return;\r\n      }\r\n\r\n      if (selectedFiles.length + acceptedFiles.length > maxFiles) {\r\n        setError(`You can only upload up to ${maxFiles} files.`);\r\n        return;\r\n      }\r\n\r\n      setError(null);\r\n\r\n      const newPreviews = acceptedFiles.map((file) =>\r\n        URL.createObjectURL(file)\r\n      );\r\n      setPreviews((prev) =>\r\n        multiple ? [...prev, ...newPreviews] : newPreviews\r\n      );\r\n      setSelectedFiles((prev) =>\r\n        multiple ? [...prev, ...acceptedFiles] : acceptedFiles\r\n      );\r\n\r\n      onFileSelect(multiple ? [...selectedFiles, ...acceptedFiles] : acceptedFiles[0]);\r\n    },\r\n    [onFileSelect, selectedFiles, multiple, maxFiles]\r\n  );\r\n\r\n  const handleDelete = (index: number) => {\r\n    const updatedFiles = selectedFiles.filter((_, i) => i !== index);\r\n    const updatedPreviews = previews.filter((_, i) => i !== index);\r\n\r\n    setSelectedFiles(updatedFiles);\r\n    setPreviews(updatedPreviews);\r\n\r\n    onFileSelect(multiple ? updatedFiles : updatedFiles[0] || null);\r\n  };\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n    onDrop: handleDrop,\r\n    accept: { \"image/jpeg\": [], \"image/png\": [], \"image/webp\": [] },\r\n    multiple,\r\n    maxFiles,\r\n    maxSize,\r\n  });\r\n\r\n  return (\r\n    <Box\r\n      {...getRootProps()}\r\n      sx={{\r\n        border: \"2px dashed #ccc\",\r\n        borderRadius: \"8px\",\r\n        padding: \"16px\",\r\n        textAlign: \"center\",\r\n        cursor: \"pointer\",\r\n        position: \"relative\",\r\n      }}\r\n    >\r\n      <input {...getInputProps()} />\r\n      <CloudUploadIcon fontSize=\"large\" color=\"primary\" />\r\n      <Typography variant=\"body2\" sx={{ mt: 1 }}>\r\n        {isDragActive ? \"Drop files here...\" : `Click or drag files to upload ${label}`}\r\n      </Typography>\r\n      <Typography variant=\"caption\" display=\"block\">\r\n        {multiple ? `Up to ${maxFiles} files` : \"Single file\"}, Max{\" \"}\r\n        {maxSize / (1024 * 1024)}MB each, (JPEG, PNG, WEBP)\r\n      </Typography>\r\n\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mt: 2 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      <Box sx={{ display: \"flex\", flexWrap: \"wrap\", mt: 2, gap: 1 }}>\r\n        {previews.map((src, index) => (\r\n          <Box key={index} sx={{ position: \"relative\" }}>\r\n            <img\r\n              src={src}\r\n              alt={`preview-${index}`}\r\n              style={{\r\n                width: 80,\r\n                height: 80,\r\n                borderRadius: 8,\r\n                objectFit: \"cover\",\r\n                border: \"1px solid #ddd\",\r\n              }}\r\n            />\r\n            <IconButton\r\n              size=\"small\"\r\n              sx={{\r\n                position: \"absolute\",\r\n                top: 0,\r\n                right: 0,\r\n                bgcolor: \"rgba(0,0,0,0.5)\",\r\n                color: \"white\",\r\n              }}\r\n              onClick={(e) => {\r\n                e.stopPropagation();\r\n                handleDelete(index);\r\n              }}\r\n            >\r\n              <DeleteIcon fontSize=\"small\" />\r\n            </IconButton>\r\n          </Box>\r\n        ))}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ImageUploader;\r\n","import {\r\n  Add,\r\n  CheckBox,\r\n  CheckBoxOutlineBlank,\r\n  Delete,\r\n} from \"@mui/icons-material\";\r\nimport {\r\n  Box,\r\n  Checkbox,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormHelperText,\r\n  Grid,\r\n  IconButton,\r\n  InputLabel,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  MenuItem,\r\n  RadioGroup,\r\n  Select,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { FieldArray, FormikErrors, FormikProvider, useFormik } from \"formik\";\r\nimport { useEffect, useMemo, useState } from \"react\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport * as Yup from \"yup\";\r\nimport color from \"../../components/color\";\r\nimport CustomButton from \"../../components/CustomButton\";\r\nimport {\r\n  amenitiesOptions,\r\n  amenityIcons,\r\n  roomTypes,\r\n} from \"../../components/data\";\r\nimport ImageUploader from \"../../components/ImageUploader\";\r\nimport { BpRadio, CustomTextField, inputSx } from \"../../components/style\";\r\nimport { getUserId } from \"../../services/axiosClient\";\r\nimport { docsUpload, editHotel, editRoom, getMyAllHotelswithBelongsTo, hotelPost, roomPost } from \"../../services/services\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  propertyName: Yup.string()\r\n    .trim()\r\n    .min(3, \"Property name must be at least 3 characters long\")\r\n    .max(100, \"Property name cannot exceed 100 characters\")\r\n    .required(\"Property name is required\"),\r\n\r\n  propertyType: Yup.string().trim().required(\"Property type is required\"),\r\n\r\n  propertyDescription: Yup.string()\r\n    .trim()\r\n    .min(10, \"Description must be at least 10 characters long\")\r\n    .max(1000, \"Description cannot exceed 1000 characters\")\r\n    .required(\"Property description is required\"),\r\n\r\n  ownerMobile: Yup.string()\r\n    .matches(/^[6-9]\\d{9}$/, \"Invalid mobile number\")\r\n    .required(\"Owner's mobile number is required\"),\r\n\r\n  ownerEmail: Yup.string()\r\n    .trim()\r\n    .email(\"Invalid email format\")\r\n    .required(\"Owner's email is required\"),\r\n\r\n  receptionMobile: Yup.string()\r\n    .matches(/^[6-9]\\d{9}$/, \"Invalid mobile number\")\r\n    .required(\"Reception mobile number is required\"),\r\n\r\n  receptionEmail: Yup.string()\r\n    .trim()\r\n    .email(\"Invalid email format\")\r\n    .required(\"Reception email is required\"),\r\n\r\n  address: Yup.string()\r\n    .trim()\r\n    .min(5, \"Address must be at least 5 characters long\")\r\n    .max(255, \"Address cannot exceed 255 characters\")\r\n    .required(\"Address is required\"),\r\n\r\n  city: Yup.string().trim().required(\"City is required\"),\r\n\r\n  state: Yup.string().trim().required(\"State is required\"),\r\n\r\n  pincode: Yup.string()\r\n    .matches(/^\\d{6}$/, \"Invalid pincode\")\r\n    .required(\"Pincode is required\"),\r\n\r\n  landmark: Yup.string()\r\n    .trim()\r\n    .max(255, \"Landmark cannot exceed 255 characters\"),\r\n\r\n  googleBusinessPage: Yup.string().trim().url(\"Invalid URL\"),\r\n\r\n  gstNo: Yup.string()\r\n    .matches(\r\n      /^\\d{2}[A-Z]{5}\\d{4}[A-Z]{1}\\d{1}[Z]{1}[A-Z\\d]{1}$/,\r\n      \"Invalid GST number\"\r\n    )\r\n    .required(\"GST number is required\"),\r\n\r\n  panNo: Yup.string()\r\n    .matches(/^[A-Z]{5}[0-9]{4}[A-Z]{1}$/, \"Invalid PAN number\")\r\n    .required(\"PAN number is required\"),\r\n\r\n  gstCertificate: Yup.mixed().required(\"GST Certificate is required\"),\r\n\r\n  panCard: Yup.mixed().required(\"PAN Card is required\"),\r\n\r\n  propertyImages: Yup.array()\r\n    .of(Yup.mixed().required(\"Each image is required\"))\r\n    .min(7, \"At least seven property images are required\")\r\n    .required(\"Property images are required\"),\r\n\r\n  bankaccountNo: Yup.string()\r\n    .matches(/^\\d{9,18}$/, \"Bank account number must be 9 to 18 digits\")\r\n    .required(\"Bank account number is required\"),\r\n\r\n  bankname: Yup.string()\r\n    .matches(\r\n      /^[a-zA-Z\\s]+$/,\r\n      \"Bank name should only contain letters and spaces\"\r\n    )\r\n    .required(\"Bank name is required\"),\r\n\r\n  // ifsccode: Yup.string()\r\n  //   .matches(/^[A-Z]{4}0[A-Z0-9]{6}$/, 'Invalid IFSC code format')\r\n  //   .required('IFSC code is required'),\r\n\r\n  propertyPolicies: Yup.string()\r\n    .trim()\r\n    .min(10, \"Policy must be at least 10 characters long\")\r\n    .max(1000, \"Policy cannot exceed 1000 characters\")\r\n    .required(\"Property policy is required\"),\r\n\r\n  stayType: Yup.string().required(\"Required\"),\r\n  rooms: Yup.array().of(\r\n    Yup.object().shape({\r\n      // roomCategory: Yup.string().required(\"Room category is required\"),\r\n      roomSize: Yup.string().required(\"Room size is required\"),\r\n      rateFor1Night: Yup.number()\r\n        .typeError(\"Rate for 1 night must be a valid number\")\r\n        .when(\"$stayType\", {\r\n          is: \"overnight\",\r\n          then: (schema) =>\r\n            schema\r\n              .required(\"Rate for 1 night is required\")\r\n              .min(100, \"Minimum Rate is ₹100\"),\r\n          otherwise: (schema) => schema.notRequired(),\r\n        }),\r\n      rateFor3Hour: Yup.number()\r\n        .typeError(\"Rate for 3 hours must be a valid number\")\r\n        .when(\"$stayType\", {\r\n          is: \"hourly\",\r\n          then: (schema) =>\r\n            schema\r\n              .required(\"Rate for 3 hours is required\")\r\n              .min(100, \"Minimum Rate is ₹100 \"),\r\n          otherwise: (schema) => schema.notRequired(),\r\n        }),\r\n      rateFor6Hour: Yup.number()\r\n        .typeError(\"Rate for 6 hours must be a valid number\")\r\n        .when(\"$stayType\", {\r\n          is: \"hourly\",\r\n          then: (schema) =>\r\n            schema\r\n              .required(\"Rate for 6 hours is required\")\r\n              .min(100, \"Minimum Rate is ₹100 \"),\r\n          otherwise: (schema) => schema.notRequired(),\r\n        }),\r\n\r\n      rateFor12Hour: Yup.number()\r\n        .typeError(\"Rate for 12 hours must be a valid number\")\r\n        .when(\"$stayType\", {\r\n          is: \"hourly\",\r\n          then: (schema) =>\r\n            schema\r\n              .required(\"Rate for 12 hours is required\")\r\n              .min(100, \"Minimum Rate is ₹100 \"),\r\n          otherwise: (schema) => schema.notRequired(),\r\n        }),\r\n\r\n      additionalGuestRate: Yup.number()\r\n        .typeError(\"Additional guest rate must be a valid number\")\r\n        .required(\"Additional guest rate is required\")\r\n        .min(0, \"Rate cannot be negative\"),\r\n      additionalChildRate: Yup.number()\r\n        .typeError(\"Additional child rate must be a valid number\")\r\n        .required(\"Additional child rate is required\")\r\n        .min(0, \"Rate cannot be negative\"),\r\n      standardRoomOccupancy: Yup.number()\r\n        .typeError(\"Standard room occupancy must be a number\")\r\n        .required(\"Standard room occupancy is required\")\r\n        .min(1, \"Must be at least 1\"),\r\n      maxRoomOccupancy: Yup.number()\r\n        .typeError(\"Max room occupancy must be a number\")\r\n        .required(\"Max room occupancy is required\")\r\n        .min(\r\n          Yup.ref(\"standardRoomOccupancy\"),\r\n          \"Max occupancy must be greater than or equal to standard occupancy\"\r\n        ),\r\n      numberOfFreeChildren: Yup.number()\r\n        .typeError(\"Number of free children must be a number\")\r\n        .required(\"Number of free children is required\")\r\n        .min(0, \"Cannot be negative\"),\r\n      numberOfRoomsAvailable: Yup.number()\r\n        .typeError(\"No. of Available Rooms must be a number\")\r\n        .required(\"No. of available rooms are required\")\r\n        .min(0, \"Cannot be negative\"),\r\n      tax: Yup.number()\r\n        .typeError(\"Tax must be a number\")\r\n        .required(\"Tax of room is required\")\r\n        .min(0, \"Cannot be negative\"),\r\n      extraFees: Yup.number()\r\n        .typeError(\"Extra fees must be a number\")\r\n        .required(\"Extra fees is required\")\r\n        .min(0, \"Cannot be negative\"),\r\n      amenities: Yup.array()\r\n        .of(Yup.string().required(\"Amenity cannot be empty\"))\r\n        .min(1, \"At least one amenity is required\"),\r\n      // roomImage: Yup.mixed().required(\"Room image is required\"),\r\n    })\r\n  ),\r\n});\r\ninterface Room {\r\n  id: string;\r\n  roomCategory: string;\r\n  roomSize: string;\r\n  numberOfRoomsAvailable: string;\r\n  rateFor1Night?: string;\r\n  rateFor3Hour?: string;\r\n  rateFor6Hour?: string;\r\n  rateFor9Hour?: string;\r\n  rateFor12Hour?: string;\r\n  rateFor24Hour?: string;\r\n  additionalGuestRate: string;\r\n  additionalChildRate: string;\r\n  standardRoomOccupancy: string;\r\n  maxRoomOccupancy: string;\r\n  numberOfFreeChildren: string;\r\n  tax: string;\r\n  extraFees: string;\r\n  amenities: string[];\r\n  roomImage: string | null;\r\n}\r\nconst PropertyForm = () => {\r\n  const [previewImage, setPreviewImage] = useState<string | null>(null); // To hold a single image\r\n  const [uploading, setUploading] = useState(false);\r\n  const handleFileChange = async (\r\n    file: File,\r\n    setFieldValue: (value: string) => void\r\n  ) => {\r\n    if (file) {\r\n      const formData = new FormData();\r\n      formData.append(\"files\", file);\r\n\r\n      setUploading(true);\r\n      try {\r\n        const res = await docsUpload(formData);\r\n        const uploadedUrl = res?.data?.data?.doc0;\r\n\r\n        if (uploadedUrl) {\r\n          setPreviewImage(uploadedUrl);\r\n          setFieldValue(uploadedUrl);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error uploading file:\", error);\r\n      } finally {\r\n        setUploading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleFileChange1 = async (\r\n    files: File[],\r\n    setFieldValue: (value: string[]) => void\r\n  ) => {\r\n    if (files.length) {\r\n      const uploadedUrls: string[] = [];\r\n\r\n      setUploading(true);\r\n      try {\r\n        for (const file of files) {\r\n          const formData = new FormData();\r\n          formData.append(\"files\", file);\r\n\r\n          const res = await docsUpload(formData);\r\n          const uploadedUrl = res?.data?.data?.doc0;\r\n\r\n          if (uploadedUrl) {\r\n            uploadedUrls.push(uploadedUrl);\r\n          }\r\n        }\r\n\r\n        if (uploadedUrls.length) {\r\n          setFieldValue(uploadedUrls); // ✅ Set array of uploaded URLs\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error uploading files:\", error);\r\n      } finally {\r\n        setUploading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const navigate = useNavigate();\r\n  const sanitizeValue = (value: any) => (value === \"\" ? null : value);\r\n\r\n  const location = useLocation();\r\n  const id = location.state;\r\n\r\n\r\n  // console.log(id)\r\n  const [hotelData, setHotelData] = useState<any>({})\r\n  useEffect(() => {\r\n    if (id) {\r\n      getMyAllHotelswithBelongsTo({\r\n        id: id,\r\n        secondTable: \"Room\",\r\n      }).then((res) => {\r\n        const data = res?.data?.data?.[0];\r\n        // console.log(data)\r\n        setHotelData(data);\r\n      }\r\n      );\r\n    }\r\n  }, [id])\r\n  const isEditMode = !!hotelData?.id;\r\n\r\n\r\n  const initialValues = useMemo(() => ({\r\n    propertyName: hotelData?.propertyName || \"\",\r\n    propertyType: hotelData?.propertyType || \"\",\r\n    propertyDescription: hotelData?.propertyDesc || \"\",\r\n    ownerMobile: hotelData?.ownerMobile || \"\",\r\n    ownerEmail: hotelData?.ownerEmail || \"\",\r\n    receptionMobile: hotelData?.receptionMobile || \"\",\r\n    receptionEmail: hotelData?.receptionEmail || \"\",\r\n    address: hotelData?.address || \"\",\r\n    city: hotelData?.city || \"\",\r\n    state: hotelData?.state || \"\",\r\n    pincode: hotelData?.pincode || \"\",\r\n    landmark: hotelData?.landmark || \"\",\r\n    bankaccountNo: hotelData?.bankAccountNumber || \"\",\r\n    bankname: hotelData?.bankName || \"\",\r\n    ifsccode: hotelData?.bankIfsc || \"\",\r\n    bankpassbook: hotelData?.bankPassbook || \"\",\r\n    googleBusinessPage: hotelData?.googleBusinessPage || \"\",\r\n    gstNo: hotelData?.gstNo || \"\",\r\n    panNo: hotelData?.panNo || \"\",\r\n    gstCertificate: hotelData?.gstCertificateImage || null,\r\n    panCard: hotelData?.panCardImage || null,\r\n    propertyImages: hotelData?.propertyImages || [],\r\n    propertyServices: hotelData?.extraService || \"\",\r\n    propertyPolicies: hotelData?.propertyPolicy || \"\",\r\n    stayType: hotelData?.romms?.[0]?.stayType || \"overnight\",\r\n    coupleFriendly: hotelData?.coupleFriendly || \"yes\",\r\n    businessFriendly: hotelData?.businessFriendly || \"yes\",\r\n    familyFriendly: hotelData?.familyFriendly || \"yes\",\r\n    petFriendly: hotelData?.petFriendly || \"yes\",\r\n    // rooms: [\r\n    //   {\r\n    //     roomCategory: \"\",\r\n    //     roomSize: \"\",\r\n    //     rateFor1Night: \"\",\r\n    //     rateFor3Hour: \"\",\r\n    //     rateFor6Hour: \"\",\r\n    //     rateFor9Hour: \"\",\r\n    //     rateFor12Hour: \"\",\r\n    //     rateFor24Hour: \"\",\r\n    //     additionalGuestRate: \"\",\r\n    //     additionalChildRate: \"\",\r\n    //     standardRoomOccupancy: \"\",\r\n    //     maxRoomOccupancy: \"\",\r\n    //     numberOfFreeChildren: \"\",\r\n    //     numberOfRoomsAvailable: \"\",\r\n    //     extraFees: \"\",\r\n    //     tax: \"\",\r\n    //     amenities: [] as string[],\r\n    //     roomImage: null,\r\n    //   },\r\n    // ],\r\n    rooms: hotelData?.rooms?.length\r\n      ? hotelData?.rooms?.map((room: any) => ({\r\n        id: room?.id || \"\",\r\n        roomCategory: room?.roomCategory || \"\",\r\n        roomSize: room?.roomSize || \"\",\r\n        rateFor1Night: room?.rateFor1Night || \"\",\r\n        rateFor3Hour: room?.rateFor3Hour || \"\",\r\n        rateFor6Hour: room?.rateFor6Hour || \"\",\r\n        rateFor9Hour: room?.rateFor9Hour || \"\",\r\n        rateFor12Hour: room?.rateFor12Hour || \"\",\r\n        rateFor24Hour: room?.rateFor24Hour || \"\",\r\n        additionalGuestRate: room?.additionalGuestRate || \"\",\r\n        additionalChildRate: room?.additionalChildRate || \"\",\r\n        standardRoomOccupancy: room?.standardRoomOccupancy || \"\",\r\n        maxRoomOccupancy: room?.maxRoomOccupancy || \"\",\r\n        numberOfFreeChildren: room?.numberOfFreeChildren || \"\",\r\n        numberOfRoomsAvailable: room?.availableRooms || \"\",\r\n        extraFees: room?.extrafees || \"\",\r\n        tax: room?.taxRate || \"\",\r\n        amenities: room?.amenities || [],\r\n        roomImage: room?.roomImage || null,\r\n      }))\r\n      : [\r\n        {\r\n          roomCategory: \"\",\r\n          roomSize: \"\",\r\n          rateFor1Night: \"\",\r\n          rateFor3Hour: \"\",\r\n          rateFor6Hour: \"\",\r\n          rateFor9Hour: \"\",\r\n          rateFor12Hour: \"\",\r\n          rateFor24Hour: \"\",\r\n          additionalGuestRate: \"\",\r\n          additionalChildRate: \"\",\r\n          standardRoomOccupancy: \"\",\r\n          maxRoomOccupancy: \"\",\r\n          numberOfFreeChildren: \"\",\r\n          numberOfRoomsAvailable: \"\",\r\n          extraFees: \"\",\r\n          tax: \"\",\r\n          amenities: [],\r\n          roomImage: null,\r\n        },\r\n      ],\r\n  }), [hotelData]); // React will reinitialize Formik when hotelData changes\r\n\r\n\r\n\r\n\r\n  const formik = useFormik({\r\n\r\n    // initialValues: {\r\n    //   propertyName: hotelData.propertyName || \"\",\r\n    //   propertyType: \"\",\r\n    //   propertyDescription: \"\",\r\n    //   ownerMobile: \"\",\r\n    //   ownerEmail: \"\",\r\n    //   receptionMobile: \"\",\r\n    //   receptionEmail: \"\",\r\n    //   address: \"\",\r\n    //   city: \"\",\r\n    //   state: \"\",\r\n    //   pincode: \"\",\r\n    //   landmark: \"\",\r\n    //   bankaccountNo: \"\",\r\n    //   bankname: \"\",\r\n    //   ifsccode: \"\",\r\n    //   bankpassbook: \"\",\r\n    //   googleBusinessPage: \"\",\r\n    //   gstNo: \"\",\r\n    //   panNo: \"\",\r\n    //   gstCertificate: null,\r\n    //   panCard: null,\r\n    //   propertyImages: [],\r\n    //   propertyServices: \"\",\r\n    //   propertyPolicies: \"\",\r\n    //   stayType: \"overnight\",\r\n    //   coupleFriendly: \"yes\", //new\r\n    //   businessFriendly: \"yes\", //new\r\n    //   familyFriendly: \"yes\", //new\r\n    //   petFriendly: \"yes\", //new\r\n    //   rooms: [\r\n    //     {\r\n    //       roomCategory: \"\",\r\n    //       roomSize: \"\",\r\n    //       rateFor1Night: \"\",\r\n    //       rateFor3Hour: \"\",\r\n    //       rateFor6Hour: \"\",\r\n    //       rateFor9Hour: \"\",\r\n    //       rateFor12Hour: \"\",\r\n    //       rateFor24Hour: \"\",\r\n    //       additionalGuestRate: \"\",\r\n    //       additionalChildRate: \"\",\r\n    //       standardRoomOccupancy: \"\",\r\n    //       maxRoomOccupancy: \"\",\r\n    //       numberOfFreeChildren: \"\",\r\n    //       numberOfRoomsAvailable: \"\",\r\n    //       extraFees: \"\", //new\r\n    //       tax: \"\", //new\r\n    //       amenities: [] as string[],\r\n    //       roomImage: null,\r\n    //     },\r\n    //   ],\r\n    // },\r\n    initialValues,\r\n    validationSchema,\r\n    enableReinitialize: true,\r\n    onSubmit: (values) => {\r\n      console.log(values);\r\n      const payLoad = {\r\n        userId: getUserId(),\r\n        propertyName: values.propertyName,\r\n        propertyType: values.propertyType,\r\n        propertyDesc: values.propertyDescription,\r\n        ownerMobile: values.ownerMobile,\r\n        ownerEmail: values.ownerEmail,\r\n        receptionMobile: values.receptionMobile,\r\n        receptionEmail: values.receptionEmail,\r\n        address: values.address,\r\n        city: values.city,\r\n        state: values.state,\r\n        pincode: values.pincode,\r\n        landmark: values.landmark,\r\n        googleBusinessPage: values.googleBusinessPage,\r\n        gstNo: values.gstNo,\r\n        panNo: values.panNo,\r\n        gstCertificateImage: values.gstCertificate,\r\n        panCardImage: values.panCard,\r\n        extraService: values.propertyServices,\r\n        bankName: values.bankname,\r\n        bankAccountNumber: values.bankaccountNo,\r\n        bankIfsc: values.ifsccode,\r\n        propertyImages: values.propertyImages,\r\n        bankPassbook: values.bankpassbook,\r\n        propertyPolicy: values.propertyPolicies,\r\n        coupleFriendly: values.coupleFriendly,\r\n        petFriendly: values.petFriendly,\r\n        familyFriendly: values.familyFriendly,\r\n        businessFriendly: values.businessFriendly,\r\n        status: \"Pending\",\r\n\r\n      };\r\n\r\n      const editpayLoad = {\r\n        userId: getUserId(),\r\n        propertyName: values.propertyName,\r\n        propertyType: values.propertyType,\r\n        propertyDesc: values.propertyDescription,\r\n        ownerMobile: values.ownerMobile,\r\n        ownerEmail: values.ownerEmail,\r\n        receptionMobile: values.receptionMobile,\r\n        receptionEmail: values.receptionEmail,\r\n        address: values.address,\r\n        city: values.city,\r\n        state: values.state,\r\n        pincode: values.pincode,\r\n        landmark: values.landmark,\r\n        googleBusinessPage: values.googleBusinessPage,\r\n        gstNo: values.gstNo,\r\n        panNo: values.panNo,\r\n        gstCertificateImage: values.gstCertificate,\r\n        panCardImage: values.panCard,\r\n        extraService: values.propertyServices,\r\n        bankName: values.bankname,\r\n        bankAccountNumber: values.bankaccountNo,\r\n        bankIfsc: values.ifsccode,\r\n        propertyImages: values.propertyImages,\r\n        bankPassbook: values.bankpassbook,\r\n        propertyPolicy: values.propertyPolicies,\r\n        coupleFriendly: values.coupleFriendly,\r\n        petFriendly: values.petFriendly,\r\n        familyFriendly: values.familyFriendly,\r\n        businessFriendly: values.businessFriendly,\r\n\r\n      };\r\n      console.log(editpayLoad)\r\n      if (isEditMode) {\r\n\r\n\r\n        editHotel(hotelData?.id, editpayLoad).then(async (res) => {\r\n          if (res?.data?.status_code) {\r\n            const roomUpdates = values.rooms.map(async (room: any) => {\r\n              const roomPayload = {\r\n                hotelId: hotelData?.id,\r\n                stayType: values.stayType,\r\n                roomCategory: room.roomCategory,\r\n                roomSize: room.roomSize,\r\n                availableRooms: room.numberOfRoomsAvailable,\r\n                rateFor1Night: sanitizeValue(room.rateFor1Night),\r\n                rateFor3Hour: sanitizeValue(room.rateFor3Hour),\r\n                rateFor6Hour: sanitizeValue(room.rateFor6Hour),\r\n                rateFor9Hour: sanitizeValue(room.rateFor9Hour),\r\n                rateFor12Hour: sanitizeValue(room.rateFor12Hour),\r\n                rateFor24Hour: sanitizeValue(room.rateFor24Hour),\r\n                additionalGuestRate: sanitizeValue(room.additionalGuestRate),\r\n                additionalChildRate: sanitizeValue(room.additionalChildRate),\r\n                standardRoomOccupancy: room.standardRoomOccupancy,\r\n                maxRoomOccupancy: room.maxRoomOccupancy,\r\n                numberOfFreeChildren: room.numberOfFreeChildren,\r\n                taxRate: room.tax,\r\n                extrafees: room.extraFees,\r\n                amenities: room.amenities,\r\n                roomImages: room.roomImage,\r\n              };\r\n\r\n              console.log(room.id)\r\n              // Check if room exists (has ID) or is new\r\n              if (room.id) {\r\n                return editRoom(room.id, roomPayload);\r\n              }\r\n            });\r\n\r\n            const roomResponse = await Promise.all(roomUpdates);\r\n            console.log(roomResponse)\r\n            if (roomResponse) {\r\n              toast.success(\"Hotel and rooms updated successfully!\");\r\n            }\r\n\r\n          }\r\n\r\n        })\r\n      } else {\r\n\r\n        hotelPost(payLoad)\r\n          .then((res) => {\r\n            if (res?.data?.data?.id) {\r\n              const roomPayload = values.rooms.map((room: any) => ({\r\n                hotelId: res?.data?.data?.id,\r\n                stayType: values.stayType,\r\n                roomCategory: room.roomCategory,\r\n                roomSize: room.roomSize,\r\n                availableRooms: room.numberOfRoomsAvailable,\r\n                rateFor1Night: sanitizeValue(room.rateFor1Night),\r\n                rateFor3Hour: sanitizeValue(room.rateFor3Hour),\r\n                rateFor6Hour: sanitizeValue(room.rateFor6Hour),\r\n                rateFor12Hour: sanitizeValue(room.rateFor12Hour),\r\n                additionalGuestRate: sanitizeValue(room.additionalGuestRate),\r\n                additionalChildRate: sanitizeValue(room.additionalChildRate),\r\n                standardRoomOccupancy: room.standardRoomOccupancy,\r\n                maxRoomOccupancy: room.maxRoomOccupancy,\r\n                numberOfFreeChildren: room.numberOfFreeChildren,\r\n                taxRate: room.tax,\r\n                extrafees: room.extraFees,\r\n                amenities: room.amenities,\r\n                roomImages: room.roomImage,\r\n              }));\r\n              console.log(roomPayload);\r\n              roomPost(roomPayload)\r\n                .then((res) => {\r\n                  toast(res?.data?.msg);\r\n                  navigate(\"/hotel-applications\");\r\n                })\r\n                .catch((err) => {\r\n                  console.log(err);\r\n                });\r\n            }\r\n          })\r\n          .catch((err) => {\r\n            console.log(err);\r\n          });\r\n      }\r\n    },\r\n  });\r\n\r\n  const hotelFeatures = [\r\n    { label: \"Couple Friendly\", name: \"coupleFriendly\" },\r\n    { label: \"Pet Friendly\", name: \"petFriendly\" },\r\n    { label: \"Family Friendly\", name: \"familyFriendly\" },\r\n    { label: \"Business Friendly\", name: \"businessFriendly\" },\r\n  ];\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        margin: \"auto\",\r\n        minHeight: \"100vh\",\r\n        p: 4,\r\n        background: \"url('/assets/bg.jpg')\",\r\n        backgroundSize: \"cover\",\r\n        backgroundPosition: \"bottom\",\r\n        position: \"relative\",\r\n      }}\r\n    >\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          gap: 2,\r\n          margin: \"auto\",\r\n          padding: 3,\r\n          pb: 6,\r\n          background: \"#f6f6f6\",\r\n          boxShadow: \"0px 0px 20px rgba(0, 0, 0, 0.11) inset\",\r\n          borderRadius: 2,\r\n          minHeight: \"100vh\",\r\n          zIndex: 2,\r\n          position: \"relative\",\r\n        }}\r\n      >\r\n        <Typography variant=\"h5\" fontWeight=\"bold\" mb={1}>\r\n          Property registration Form\r\n        </Typography>\r\n        <FormikProvider value={formik}>\r\n          <form onSubmit={formik.handleSubmit}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} md={4}>\r\n                <CustomTextField\r\n                  fullWidth\r\n                  label=\"Property Name\"\r\n                  {...formik.getFieldProps(\"propertyName\")}\r\n                  error={\r\n                    formik.touched.propertyName &&\r\n                    Boolean(formik.errors.propertyName)\r\n                  }\r\n                  helperText={\r\n                    formik.touched.propertyName && typeof formik.errors.propertyName === \"string\"\r\n                      ? formik.errors.propertyName\r\n                      : undefined\r\n                  }\r\n\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={4}>\r\n                <CustomTextField\r\n                  fullWidth\r\n                  select\r\n                  label=\"Property Type\"\r\n                  {...formik.getFieldProps(\"propertyType\")}\r\n                  error={\r\n                    formik.touched.propertyType &&\r\n                    Boolean(formik.errors.propertyType)\r\n                  }\r\n                  helperText={\r\n                    formik.touched.propertyType && typeof formik.errors.propertyType === \"string\"\r\n                      ? formik.errors.propertyType\r\n                      : undefined\r\n                  }\r\n                >\r\n                  <MenuItem value=\"Hotel\">Hotel</MenuItem>\r\n                  <MenuItem value=\"Villa\">Villa</MenuItem>\r\n                </CustomTextField>\r\n              </Grid>\r\n              <Grid item xs={12} md={4}>\r\n                <CustomTextField\r\n                  sx={{\r\n                    \"& .MuiInputBase-input\": { resize: \"vertical\" },\r\n                    \"& textarea\": { resize: \"vertical\" },\r\n                  }}\r\n                  fullWidth\r\n                  label=\"Property Description\"\r\n                  {...formik.getFieldProps(\"propertyDescription\")}\r\n                  multiline\r\n                  rows={1}\r\n                  error={\r\n                    formik.touched.propertyDescription &&\r\n                    Boolean(formik.errors.propertyDescription)\r\n                  }\r\n                  helperText={\r\n                    formik.touched.propertyDescription &&\r\n                      typeof formik.errors.propertyDescription === \"string\"\r\n                      ? formik.errors.propertyDescription\r\n                      : undefined\r\n                  }\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={12} md={4}>\r\n                <CustomTextField\r\n                  fullWidth\r\n                  label=\"Owner Mobile\"\r\n                  {...formik.getFieldProps(\"ownerMobile\")}\r\n                  error={\r\n                    formik.touched.ownerMobile &&\r\n                    Boolean(formik.errors.ownerMobile)\r\n                  }\r\n                  helperText={\r\n                    formik.touched.ownerMobile && typeof formik.errors.ownerMobile === \"string\"\r\n                      ? formik.errors.ownerMobile\r\n                      : undefined\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={4}>\r\n                <CustomTextField\r\n                  fullWidth\r\n                  label=\"Owner Email\"\r\n                  {...formik.getFieldProps(\"ownerEmail\")}\r\n                  error={\r\n                    formik.touched.ownerEmail &&\r\n                    Boolean(formik.errors.ownerEmail)\r\n                  }\r\n                  helperText={\r\n                    formik.touched.ownerEmail && typeof formik.errors.ownerEmail === \"string\"\r\n                      ? formik.errors.ownerEmail\r\n                      : undefined\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={4}>\r\n                <CustomTextField\r\n                  fullWidth\r\n                  label=\"Reception Mobile\"\r\n                  {...formik.getFieldProps(\"receptionMobile\")}\r\n                  error={\r\n                    formik.touched.receptionMobile &&\r\n                    Boolean(formik.errors.receptionMobile)\r\n                  }\r\n                  helperText={\r\n                    formik.touched.receptionMobile && typeof formik.errors.receptionMobile === \"string\"\r\n                      ? formik.errors.receptionMobile\r\n                      : undefined\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={4}>\r\n                <CustomTextField\r\n                  fullWidth\r\n                  label=\"Reception Email\"\r\n                  {...formik.getFieldProps(\"receptionEmail\")}\r\n                  error={\r\n                    formik.touched.receptionEmail &&\r\n                    Boolean(formik.errors.receptionEmail)\r\n                  }\r\n                  helperText={\r\n                    formik.touched.receptionEmail && typeof formik.errors.receptionEmail === \"string\"\r\n                      ? formik.errors.receptionEmail\r\n                      : undefined\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={4}>\r\n                <CustomTextField\r\n                  placeholder=\"Enter the complete property address to enable accurate user searches\"\r\n                  fullWidth\r\n                  label=\"Address\"\r\n                  {...formik.getFieldProps(\"address\")}\r\n                  error={\r\n                    formik.touched.address && Boolean(formik.errors.address)\r\n                  }\r\n                  helperText={\r\n                    formik.touched.address && typeof formik.errors.address === \"string\"\r\n                      ? formik.errors.address\r\n                      : undefined\r\n                  }\r\n                  sx={{\r\n                    \"& .MuiInputBase-input\": { resize: \"vertical\" },\r\n                    \"& textarea\": { resize: \"vertical\" },\r\n                    \"& .MuiOutlinedInput-root\": {\r\n                      \"& fieldset\": {\r\n                        border: \"none\",\r\n                      },\r\n                    },\r\n                  }}\r\n                  multiline\r\n                  rows={1}\r\n                  onChange={(e) => {\r\n                    const value = e.target.value.replace(/,\\s*/g, \", \");\r\n                    formik.setFieldValue(\"address\", value);\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={4}>\r\n                <CustomTextField\r\n                  fullWidth\r\n                  label=\"City\"\r\n                  {...formik.getFieldProps(\"city\")}\r\n                  error={formik.touched.city && Boolean(formik.errors.city)}\r\n                  helperText={\r\n                    formik.touched.city && typeof formik.errors.city === \"string\"\r\n                      ? formik.errors.city\r\n                      : undefined\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={4}>\r\n                <CustomTextField\r\n                  fullWidth\r\n                  label=\"State\"\r\n                  {...formik.getFieldProps(\"state\")}\r\n                  error={formik.touched.state && Boolean(formik.errors.state)}\r\n                  helperText={\r\n                    formik.touched.state && typeof formik.errors.state === \"string\"\r\n                      ? formik.errors.state\r\n                      : undefined\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={4}>\r\n                <CustomTextField\r\n                  fullWidth\r\n                  label=\"Pincode\"\r\n                  {...formik.getFieldProps(\"pincode\")}\r\n                  error={\r\n                    formik.touched.pincode && Boolean(formik.errors.pincode)\r\n                  }\r\n                  helperText={\r\n                    formik.touched.pincode && typeof formik.errors.pincode === \"string\"\r\n                      ? formik.errors.pincode\r\n                      : undefined\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={4}>\r\n                <CustomTextField\r\n                  fullWidth\r\n                  label=\"Landmark\"\r\n                  {...formik.getFieldProps(\"landmark\")}\r\n                  error={\r\n                    formik.touched.landmark && Boolean(formik.errors.landmark)\r\n                  }\r\n                  helperText={\r\n                    formik.touched.landmark && typeof formik.errors.landmark === \"string\"\r\n                      ? formik.errors.landmark\r\n                      : undefined\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={4}>\r\n                <CustomTextField\r\n                  fullWidth\r\n                  label=\"Google Business Page\"\r\n                  {...formik.getFieldProps(\"googleBusinessPage\")}\r\n                  error={\r\n                    formik.touched.googleBusinessPage &&\r\n                    Boolean(formik.errors.googleBusinessPage)\r\n                  }\r\n                  helperText={\r\n                    formik.touched.googleBusinessPage && typeof formik.errors.googleBusinessPage === \"string\"\r\n                      ? formik.errors.googleBusinessPage\r\n                      : undefined\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={4}>\r\n                <CustomTextField\r\n                  fullWidth\r\n                  label=\"GST No\"\r\n                  {...formik.getFieldProps(\"gstNo\")}\r\n                  error={formik.touched.gstNo && Boolean(formik.errors.gstNo)}\r\n                  helperText={\r\n                    formik.touched.gstNo && typeof formik.errors.gstNo === \"string\"\r\n                      ? formik.errors.gstNo\r\n                      : undefined\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={4}>\r\n                <CustomTextField\r\n                  fullWidth\r\n                  label=\"PAN No\"\r\n                  {...formik.getFieldProps(\"panNo\")}\r\n                  error={formik.touched.panNo && Boolean(formik.errors.panNo)}\r\n                  helperText={\r\n                    formik.touched.panNo && typeof formik.errors.panNo === \"string\"\r\n                      ? formik.errors.panNo\r\n                      : undefined\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={4}>\r\n                <CustomTextField\r\n                  fullWidth\r\n                  label=\"Bank Name\"\r\n                  {...formik.getFieldProps(\"bankname\")}\r\n                  error={\r\n                    formik.touched.bankname && Boolean(formik.errors.bankname)\r\n                  }\r\n                  helperText={\r\n                    formik.touched.bankname && typeof formik.errors.bankname === \"string\"\r\n                      ? formik.errors.bankname\r\n                      : undefined\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={4}>\r\n                <CustomTextField\r\n                  fullWidth\r\n                  label=\"Bank Acc No.\"\r\n                  {...formik.getFieldProps(\"bankaccountNo\")}\r\n                  error={\r\n                    formik.touched.bankaccountNo &&\r\n                    Boolean(formik.errors.bankaccountNo)\r\n                  }\r\n                  helperText={\r\n                    formik.touched.bankaccountNo && typeof formik.errors.bankaccountNo === \"string\"\r\n                      ? formik.errors.bankaccountNo\r\n                      : undefined\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={4}>\r\n                <CustomTextField\r\n                  fullWidth\r\n                  label=\"IFSC Code\"\r\n                  {...formik.getFieldProps(\"ifsccode\")}\r\n                  error={\r\n                    formik.touched.ifsccode && Boolean(formik.errors.ifsccode)\r\n                  }\r\n                  helperText={\r\n                    formik.touched.ifsccode && typeof formik.errors.ifsccode === \"string\"\r\n                      ? formik.errors.ifsccode\r\n                      : undefined\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <ImageUploader\r\n                  label=\"GST Certificate\"\r\n                  onFileSelect={(file) =>\r\n                    handleFileChange(file as any, (value) =>\r\n                      formik.setFieldValue(\"gstCertificate\", value)\r\n                    )\r\n                  }\r\n                />\r\n                {formik.touched.gstCertificate &&\r\n                  formik.errors.gstCertificate && (\r\n                    <Typography color=\"error\" variant=\"caption\">\r\n                      {typeof formik.errors.gstCertificate === \"string\"\r\n                        ? formik.errors.gstCertificate\r\n                        : \"Invalid GST Certificate\"}\r\n                    </Typography>\r\n                  )}\r\n              </Grid>\r\n\r\n              <Grid item xs={12} md={6}>\r\n                <ImageUploader\r\n                  label=\"PAN Card\"\r\n                  onFileSelect={(file) =>\r\n                    handleFileChange(file as any, (value) =>\r\n                      formik.setFieldValue(\"panCard\", value)\r\n                    )\r\n                  }\r\n                />\r\n                {formik.touched.panCard && formik.errors.panCard && (\r\n                  <Typography color=\"error\" variant=\"caption\">\r\n                    {typeof formik.errors.panCard === \"string\"\r\n                      ? formik.errors.panCard\r\n                      : \"Invalid PAN Card\"}\r\n                  </Typography>\r\n                )}\r\n              </Grid>\r\n\r\n              <Grid item xs={12} md={12}>\r\n                <ImageUploader\r\n                  label=\"Bank Passbook\"\r\n                  onFileSelect={(file) =>\r\n                    handleFileChange(file as any, (value) =>\r\n                      formik.setFieldValue(\"bankpassbook\", value)\r\n                    )\r\n                  }\r\n                />\r\n                {formik.touched.bankpassbook && formik.errors.bankpassbook && (\r\n                  <Typography color=\"error\" variant=\"caption\">\r\n                    {typeof formik.errors.bankpassbook === \"string\"\r\n                      ? formik.errors.bankpassbook\r\n                      : \"Invalid bank passbook\"}\r\n                  </Typography>\r\n                )}\r\n              </Grid>\r\n              <Grid item xs={12} md={6} mt={2}>\r\n                <CustomTextField\r\n                  sx={{\r\n                    \"& .MuiInputBase-input\": { resize: \"vertical\" },\r\n                    \"& textarea\": { resize: \"vertical\" },\r\n                    \"& .MuiOutlinedInput-root\": {\r\n                      \"& fieldset\": {\r\n                        border: \"none\",\r\n                        borderRadius: \"12px\",\r\n                      },\r\n                    },\r\n                  }}\r\n                  fullWidth\r\n                  label=\"Extra Services\"\r\n                  {...formik.getFieldProps(\"propertyServices\")}\r\n                  multiline\r\n                  rows={4}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={6} mt={2}>\r\n                <CustomTextField\r\n                  sx={{\r\n                    \"& .MuiInputBase-input\": { resize: \"vertical\" },\r\n                    \"& textarea\": { resize: \"vertical\" },\r\n                    \"& .MuiOutlinedInput-root\": {\r\n                      \"& fieldset\": {\r\n                        border: \"none\",\r\n                        borderRadius: \"12px\",\r\n                      },\r\n                    },\r\n                  }}\r\n                  fullWidth\r\n                  label=\"Property Policies\"\r\n                  {...formik.getFieldProps(\"propertyPolicies\")}\r\n                  multiline\r\n                  rows={4}\r\n                  error={\r\n                    formik.touched.propertyPolicies &&\r\n                    Boolean(formik.errors.propertyPolicies)\r\n                  }\r\n                  helperText={\r\n                    formik.touched.propertyPolicies &&\r\n                      typeof formik.errors.propertyPolicies === \"string\"\r\n                      ? formik.errors.propertyPolicies\r\n                      : undefined\r\n                  }\r\n                />\r\n              </Grid>\r\n\r\n              <Grid container spacing={2}>\r\n                {hotelFeatures.map((feature) => (\r\n                  <Grid\r\n                    item\r\n                    xs={12}\r\n                    md={3}\r\n                    my={3}\r\n                    display=\"flex\"\r\n                    flexDirection=\"column\"\r\n                    alignItems=\"center\"\r\n                    justifyContent=\"center\"\r\n                    key={feature.name}\r\n                  >\r\n                    <Typography variant=\"h6\" fontWeight=\"bold\" mb={1}>\r\n                      {feature.label}\r\n                    </Typography>\r\n                    <RadioGroup row {...formik.getFieldProps(feature.name)}>\r\n                      {[\"yes\", \"no\"].map((option) => (\r\n                        <FormControlLabel\r\n                          key={option}\r\n                          sx={{\r\n                            \"& .MuiFormControlLabel-label\": {\r\n                              fontSize: \"14px\",\r\n                            },\r\n                            ...(option === \"yes\" && { mr: 4 }),\r\n                          }}\r\n                          value={option}\r\n                          control={<BpRadio />}\r\n                          label={\r\n                            option.charAt(0).toUpperCase() + option.slice(1)\r\n                          }\r\n                        />\r\n                      ))}\r\n                    </RadioGroup>\r\n                  </Grid>\r\n                ))}\r\n              </Grid>\r\n\r\n              <Grid item xs={12} md={12}>\r\n                <ImageUploader\r\n                  label=\"Property Images\"\r\n                  multiple\r\n                  maxFiles={20}\r\n                  onFileSelect={(file) =>\r\n                    handleFileChange1(file as any, (value) =>\r\n                      formik.setFieldValue(\"propertyImages\", value)\r\n                    )\r\n                  }\r\n                />\r\n                {formik.touched.propertyImages &&\r\n                  formik.errors.propertyImages && (\r\n                    <Typography color=\"error\" variant=\"caption\">\r\n                      {typeof formik.errors.propertyImages === \"string\"\r\n                        ? formik.errors.propertyImages\r\n                        : \"Invalid property images\"}\r\n                    </Typography>\r\n                  )}\r\n              </Grid>\r\n\r\n              <Grid\r\n                item\r\n                xs={12}\r\n                my={1}\r\n                mb={3}\r\n                display={\"flex\"}\r\n                flexDirection={\"column\"}\r\n                alignItems={\"center\"}\r\n                justifyContent={\"center\"}\r\n              >\r\n                <Typography variant=\"h5\" fontWeight={\"bold\"} mb={2}>\r\n                  Stay Type\r\n                </Typography>\r\n                <RadioGroup row {...formik.getFieldProps(\"stayType\")}>\r\n                  <FormControlLabel\r\n                    sx={{\r\n                      \"& .MuiFormControlLabel-label\": {\r\n                        fontSize: \"18px\",\r\n                      },\r\n                      mr: 4,\r\n                    }}\r\n                    value=\"overnight\"\r\n                    control={<BpRadio />}\r\n                    label=\"Overnight\"\r\n                  />\r\n                  <FormControlLabel\r\n                    sx={{\r\n                      \"& .MuiFormControlLabel-label\": {\r\n                        fontSize: \"18px\",\r\n                      },\r\n                    }}\r\n                    value=\"hourly\"\r\n                    control={<BpRadio />}\r\n                    label=\"Hourly\"\r\n                  />\r\n                </RadioGroup>\r\n              </Grid>\r\n              <FieldArray\r\n                name=\"rooms\"\r\n                render={(arrayHelpers) => (\r\n                  <>\r\n                    {/* {formik.values.rooms.map((room:any, index: number) => (\r\n                      <Grid\r\n                        container\r\n                        spacing={2}\r\n                        key={index}\r\n                        alignItems=\"center\"\r\n                        mb={2}\r\n                        px={2}\r\n                      >\r\n                        <Grid\r\n  style={{ paddingLeft: \"30px\" }}\r\n  item\r\n  xs={12}\r\n  md={12}\r\n  display={\"flex\"}\r\n  justifyContent={\"space-between\"}\r\n  alignItems={\"center\"}\r\n  width={\"100%\"}\r\n  fontSize={\"18px\"}\r\n  fontWeight={\"bold\"}\r\n  mb={-1}\r\n>\r\n  {formik.values.rooms.length > 1 && <>Room {index + 1}</>}\r\n\r\n  {formik.values.rooms.length > 1 && (\r\n    <IconButton sx={{ color: color.firstColor }} onClick={() => arrayHelpers.remove(index)}>\r\n      <Delete />\r\n    </IconButton>\r\n  )}\r\n</Grid>\r\n\r\n<Grid item xs={12} md={3}>\r\n  <CustomTextField\r\n    fullWidth\r\n    select\r\n    label=\"Room Category\"\r\n    {...formik.getFieldProps(`rooms.${index}.roomCategory`)}\r\n    error={\r\n      formik.touched.rooms?.[index]?.roomCategory &&\r\n      Boolean(formik.errors.rooms?.[index]?.roomCategory)\r\n    }\r\n    helperText={\r\n      formik.touched.rooms?.[index]?.roomCategory &&\r\n      formik.errors.rooms?.[index]?.roomCategory\r\n    }\r\n    SelectProps={{\r\n      renderValue: (selected) => {\r\n        const selectedRoom = roomTypes.find((room) => room.value === selected);\r\n        return selectedRoom ? selectedRoom.label : \"\";\r\n      },\r\n    }}\r\n  >\r\n    {roomTypes.map((room) => (\r\n      <MenuItem key={room.value} value={room.value}>\r\n        <div>\r\n          <Typography variant=\"body1\" fontWeight=\"bold\">\r\n            {room.label}\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\">\r\n            {room.details}\r\n          </Typography>\r\n        </div>\r\n      </MenuItem>\r\n    ))}\r\n  </CustomTextField>\r\n</Grid>\r\n\r\n<Grid item xs={12} md={3}>\r\n  <CustomTextField\r\n    fullWidth\r\n    label=\"Room Size (in sqft)\"\r\n    {...formik.getFieldProps(`rooms.${index}.roomSize`)}\r\n    error={\r\n      Array.isArray(formik.touched.rooms) &&\r\n      formik.touched.rooms[index] &&\r\n      Boolean(formik.errors.rooms?.[index]?.roomSize)\r\n    }\r\n    helperText={\r\n      Array.isArray(formik.touched.rooms) &&\r\n      formik.touched.rooms[index] &&\r\n      formik.errors.rooms?.[index]?.roomSize\r\n    }\r\n  />\r\n</Grid>\r\n\r\n<Grid item xs={12} md={3}>\r\n  <CustomTextField\r\n    fullWidth\r\n    label=\"Available Rooms\"\r\n    {...formik.getFieldProps(`rooms.${index}.numberOfRoomsAvailable`)}\r\n    error={\r\n      Array.isArray(formik.touched.rooms) &&\r\n      formik.touched.rooms[index] &&\r\n      Boolean(formik.errors.rooms?.[index]?.numberOfRoomsAvailable)\r\n    }\r\n    helperText={\r\n      Array.isArray(formik.touched.rooms) &&\r\n      formik.touched.rooms[index] &&\r\n      formik.errors.rooms?.[index]?.numberOfRoomsAvailable\r\n    }\r\n  />\r\n</Grid>\r\n\r\n\r\n                        {formik.values.stayType === \"overnight\" ? (\r\n                          <Grid item xs={12} md={3}>\r\n                            <CustomTextField\r\n                              fullWidth\r\n                              label=\"Rate for 1 Night\"\r\n                              {...formik.getFieldProps(\r\n                                `rooms.${index}.rateFor1Night`\r\n                              )}\r\n                              error={\r\n                                formik.touched.rooms?.[index]?.rateFor1Night &&\r\n                                Array.isArray(formik.errors.rooms) &&\r\n                                Boolean(\r\n                                  (\r\n                                    formik.errors.rooms as FormikErrors<\r\n                                      typeof formik.values.rooms\r\n                                    >\r\n                                  )[index]?.rateFor1Night\r\n                                )\r\n                              }\r\n                              helperText={\r\n                                formik.touched.rooms?.[index]?.rateFor1Night &&\r\n                                Array.isArray(formik.errors.rooms) &&\r\n                                (\r\n                                  formik.errors.rooms as FormikErrors<\r\n                                    typeof formik.values.rooms\r\n                                  >\r\n                                )[index]?.rateFor1Night\r\n                              }\r\n                            />\r\n                          </Grid>\r\n                        ) : (\r\n                          <>\r\n                            <Grid item xs={12} md={3}>\r\n                              <CustomTextField\r\n                                fullWidth\r\n                                label=\"Rate for 3 Hour Slot\"\r\n                                {...formik.getFieldProps(\r\n                                  `rooms.${index}.rateFor3Hour`\r\n                                )}\r\n                                error={\r\n                                  formik.touched.rooms?.[index]?.rateFor3Hour &&\r\n                                  Array.isArray(formik.errors.rooms) &&\r\n                                  Boolean(\r\n                                    (\r\n                                      formik.errors.rooms as FormikErrors<\r\n                                        typeof formik.values.rooms\r\n                                      >\r\n                                    )[index]?.rateFor3Hour\r\n                                  )\r\n                                }\r\n                                helperText={\r\n                                  formik.touched.rooms?.[index]?.rateFor3Hour &&\r\n                                  Array.isArray(formik.errors.rooms) &&\r\n                                  (\r\n                                    formik.errors.rooms as FormikErrors<\r\n                                      typeof formik.values.rooms\r\n                                    >\r\n                                  )[index]?.rateFor3Hour\r\n                                }\r\n                              />\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} md={3}>\r\n                              <CustomTextField\r\n                                fullWidth\r\n                                label=\"Rate for 6 Hour Slot\"\r\n                                {...formik.getFieldProps(\r\n                                  `rooms.${index}.rateFor6Hour`\r\n                                )}\r\n                                error={\r\n                                  formik.touched.rooms?.[index]?.rateFor6Hour &&\r\n                                  Array.isArray(formik.errors.rooms) &&\r\n                                  Boolean(\r\n                                    (\r\n                                      formik.errors.rooms as FormikErrors<\r\n                                        typeof formik.values.rooms\r\n                                      >\r\n                                    )[index]?.rateFor6Hour\r\n                                  )\r\n                                }\r\n                                helperText={\r\n                                  formik.touched.rooms?.[index]?.rateFor6Hour &&\r\n                                  Array.isArray(formik.errors.rooms) &&\r\n                                  (\r\n                                    formik.errors.rooms as FormikErrors<\r\n                                      typeof formik.values.rooms\r\n                                    >\r\n                                  )[index]?.rateFor6Hour\r\n                                }\r\n                              />\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} md={3}>\r\n                              <CustomTextField\r\n                                fullWidth\r\n                                label=\"Rate for 9 Hour Slot\"\r\n                                {...formik.getFieldProps(\r\n                                  `rooms.${index}.rateFor9Hour`\r\n                                )}\r\n                                error={\r\n                                  formik.touched.rooms?.[index]?.rateFor9Hour &&\r\n                                  Array.isArray(formik.errors.rooms) &&\r\n                                  Boolean(\r\n                                    (\r\n                                      formik.errors.rooms as FormikErrors<\r\n                                        typeof formik.values.rooms\r\n                                      >\r\n                                    )[index]?.rateFor9Hour\r\n                                  )\r\n                                }\r\n                                helperText={\r\n                                  formik.touched.rooms?.[index]?.rateFor9Hour &&\r\n                                  Array.isArray(formik.errors.rooms) &&\r\n                                  (\r\n                                    formik.errors.rooms as FormikErrors<\r\n                                      typeof formik.values.rooms\r\n                                    >\r\n                                  )[index]?.rateFor9Hour\r\n                                }\r\n                              />\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} md={3}>\r\n                              <CustomTextField\r\n                                fullWidth\r\n                                label=\"Rate for 12 Hour Slot\"\r\n                                {...formik.getFieldProps(\r\n                                  `rooms.${index}.rateFor12Hour`\r\n                                )}\r\n                                error={\r\n                                  formik.touched.rooms?.[index]\r\n                                    ?.rateFor12Hour &&\r\n                                  Array.isArray(formik.errors.rooms) &&\r\n                                  Boolean(\r\n                                    (\r\n                                      formik.errors.rooms as FormikErrors<\r\n                                        typeof formik.values.rooms\r\n                                      >\r\n                                    )[index]?.rateFor12Hour\r\n                                  )\r\n                                }\r\n                                helperText={\r\n                                  formik.touched.rooms?.[index]\r\n                                    ?.rateFor12Hour &&\r\n                                  Array.isArray(formik.errors.rooms) &&\r\n                                  (\r\n                                    formik.errors.rooms as FormikErrors<\r\n                                      typeof formik.values.rooms\r\n                                    >\r\n                                  )[index]?.rateFor12Hour\r\n                                }\r\n                              />\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} md={3}>\r\n                              <CustomTextField\r\n                                fullWidth\r\n                                label=\"Rate for 24 Hour Slot\"\r\n                                {...formik.getFieldProps(\r\n                                  `rooms.${index}.rateFor24Hour`\r\n                                )}\r\n                                error={\r\n                                  formik.touched.rooms?.[index]\r\n                                    ?.rateFor24Hour &&\r\n                                  Array.isArray(formik.errors.rooms) &&\r\n                                  Boolean(\r\n                                    (\r\n                                      formik.errors.rooms as FormikErrors<\r\n                                        typeof formik.values.rooms\r\n                                      >\r\n                                    )[index]?.rateFor24Hour\r\n                                  )\r\n                                }\r\n                                helperText={\r\n                                  formik.touched.rooms?.[index]\r\n                                    ?.rateFor24Hour &&\r\n                                  Array.isArray(formik.errors.rooms) &&\r\n                                  (\r\n                                    formik.errors.rooms as FormikErrors<\r\n                                      typeof formik.values.rooms\r\n                                    >\r\n                                  )[index]?.rateFor24Hour\r\n                                }\r\n                              />\r\n                            </Grid>\r\n                          </>\r\n                        )}\r\n\r\n                        <Grid item xs={12} md={3}>\r\n                          <CustomTextField\r\n                            fullWidth\r\n                            label=\"Additional Guest Rate\"\r\n                            {...formik.getFieldProps(\r\n                              `rooms.${index}.additionalGuestRate`\r\n                            )}\r\n                            error={\r\n                              formik.touched.rooms?.[index]\r\n                                ?.additionalGuestRate &&\r\n                              Array.isArray(formik.errors.rooms) &&\r\n                              Boolean(\r\n                                (\r\n                                  formik.errors.rooms as FormikErrors<\r\n                                    typeof formik.values.rooms\r\n                                  >\r\n                                )[index]?.additionalGuestRate\r\n                              )\r\n                            }\r\n                            helperText={\r\n                              formik.touched.rooms?.[index]\r\n                                ?.additionalGuestRate &&\r\n                              Array.isArray(formik.errors.rooms) &&\r\n                              (\r\n                                formik.errors.rooms as FormikErrors<\r\n                                  typeof formik.values.rooms\r\n                                >\r\n                              )[index]?.additionalGuestRate\r\n                            }\r\n                          />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={3}>\r\n                          <CustomTextField\r\n                            fullWidth\r\n                            label=\"Additional Child Rate\"\r\n                            {...formik.getFieldProps(\r\n                              `rooms.${index}.additionalChildRate`\r\n                            )}\r\n                            error={\r\n                              formik.touched.rooms?.[index]\r\n                                ?.additionalChildRate &&\r\n                              Array.isArray(formik.errors.rooms) &&\r\n                              Boolean(\r\n                                (\r\n                                  formik.errors.rooms as FormikErrors<\r\n                                    typeof formik.values.rooms\r\n                                  >\r\n                                )[index]?.additionalChildRate\r\n                              )\r\n                            }\r\n                            helperText={\r\n                              formik.touched.rooms?.[index]\r\n                                ?.additionalChildRate &&\r\n                              Array.isArray(formik.errors.rooms) &&\r\n                              (\r\n                                formik.errors.rooms as FormikErrors<\r\n                                  typeof formik.values.rooms\r\n                                >\r\n                              )[index]?.additionalChildRate\r\n                            }\r\n                          />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={3}>\r\n                          <CustomTextField\r\n                            fullWidth\r\n                            label=\"Standard Room Occupancy\"\r\n                            {...formik.getFieldProps(\r\n                              `rooms.${index}.standardRoomOccupancy`\r\n                            )}\r\n                            error={\r\n                              formik.touched.rooms?.[index]\r\n                                ?.standardRoomOccupancy &&\r\n                              Array.isArray(formik.errors.rooms) &&\r\n                              Boolean(\r\n                                (\r\n                                  formik.errors.rooms as FormikErrors<\r\n                                    typeof formik.values.rooms\r\n                                  >\r\n                                )[index]?.standardRoomOccupancy\r\n                              )\r\n                            }\r\n                            helperText={\r\n                              formik.touched.rooms?.[index]\r\n                                ?.standardRoomOccupancy &&\r\n                              Array.isArray(formik.errors.rooms) &&\r\n                              (\r\n                                formik.errors.rooms as FormikErrors<\r\n                                  typeof formik.values.rooms\r\n                                >\r\n                              )[index]?.standardRoomOccupancy\r\n                            }\r\n                          />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={3}>\r\n                          <CustomTextField\r\n                            fullWidth\r\n                            label=\"Max Room Occupancy\"\r\n                            {...formik.getFieldProps(\r\n                              `rooms.${index}.maxRoomOccupancy`\r\n                            )}\r\n                            error={\r\n                              formik.touched.rooms?.[index]?.maxRoomOccupancy &&\r\n                              Array.isArray(formik.errors.rooms) &&\r\n                              Boolean(\r\n                                (\r\n                                  formik.errors.rooms as FormikErrors<\r\n                                    typeof formik.values.rooms\r\n                                  >\r\n                                )[index]?.maxRoomOccupancy\r\n                              )\r\n                            }\r\n                            helperText={\r\n                              formik.touched.rooms?.[index]?.maxRoomOccupancy &&\r\n                              Array.isArray(formik.errors.rooms) &&\r\n                              (\r\n                                formik.errors.rooms as FormikErrors<\r\n                                  typeof formik.values.rooms\r\n                                >\r\n                              )[index]?.maxRoomOccupancy\r\n                            }\r\n                          />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={3}>\r\n                          <CustomTextField\r\n                            fullWidth\r\n                            label=\"Number of Free Children\"\r\n                            {...formik.getFieldProps(\r\n                              `rooms.${index}.numberOfFreeChildren`\r\n                            )}\r\n                            error={\r\n                              formik.touched.rooms?.[index]\r\n                                ?.numberOfFreeChildren &&\r\n                              Array.isArray(formik.errors.rooms) &&\r\n                              Boolean(\r\n                                (\r\n                                  formik.errors.rooms as FormikErrors<\r\n                                    typeof formik.values.rooms\r\n                                  >\r\n                                )[index]?.numberOfFreeChildren\r\n                              )\r\n                            }\r\n                            helperText={\r\n                              formik.touched.rooms?.[index]\r\n                                ?.numberOfFreeChildren &&\r\n                              Array.isArray(formik.errors.rooms) &&\r\n                              (\r\n                                formik.errors.rooms as FormikErrors<\r\n                                  typeof formik.values.rooms\r\n                                >\r\n                              )[index]?.numberOfFreeChildren\r\n                            }\r\n                          />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={3}>\r\n                          <CustomTextField\r\n                            fullWidth\r\n                            label=\"Tax Rate\"\r\n                            {...formik.getFieldProps(`rooms.${index}.tax`)}\r\n                            error={\r\n                              formik.touched.rooms?.[index]?.tax &&\r\n                              Array.isArray(formik.errors.rooms) &&\r\n                              Boolean(\r\n                                (\r\n                                  formik.errors.rooms as FormikErrors<\r\n                                    typeof formik.values.rooms\r\n                                  >\r\n                                )[index]?.tax\r\n                              )\r\n                            }\r\n                            helperText={\r\n                              formik.touched.rooms?.[index]?.tax &&\r\n                              Array.isArray(formik.errors.rooms) &&\r\n                              (\r\n                                formik.errors.rooms as FormikErrors<\r\n                                  typeof formik.values.rooms\r\n                                >\r\n                              )[index]?.tax\r\n                            }\r\n                          />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={3}>\r\n                          <CustomTextField\r\n                            fullWidth\r\n                            label=\"Extra Fees\"\r\n                            {...formik.getFieldProps(\r\n                              `rooms.${index}.extraFees`\r\n                            )}\r\n                            error={\r\n                              formik.touched.rooms?.[index]?.extraFees &&\r\n                              Array.isArray(formik.errors.rooms) &&\r\n                              Boolean(\r\n                                (\r\n                                  formik.errors.rooms as FormikErrors<\r\n                                    typeof formik.values.rooms\r\n                                  >\r\n                                )[index]?.extraFees\r\n                              )\r\n                            }\r\n                            helperText={\r\n                              formik.touched.rooms?.[index]?.extraFees &&\r\n                              Array.isArray(formik.errors.rooms) &&\r\n                              (\r\n                                formik.errors.rooms as FormikErrors<\r\n                                  typeof formik.values.rooms\r\n                                >\r\n                              )[index]?.extraFees\r\n                            }\r\n                          />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={3}>\r\n                          <FormControl fullWidth sx={{ ...inputSx, mb: 1 }}>\r\n                            <InputLabel sx={{ color: color.firstColor }}>\r\n                              Amenities\r\n                            </InputLabel>\r\n                            <Select\r\n                              style={{ border: \"none\" }}\r\n                              multiple\r\n                              {...formik.getFieldProps(\r\n                                `rooms.${index}.amenities`\r\n                              )}\r\n                              renderValue={(selected: string[]) =>\r\n                                selected.join(\", \")\r\n                              }\r\n                            >\r\n                              {amenitiesOptions.map((amenity) => (\r\n                                <MenuItem\r\n                                  style={{ color: color.secondColor }}\r\n                                  key={amenity}\r\n                                  value={amenity}\r\n                                >\r\n                                  <Checkbox\r\n                                    checkedIcon={\r\n                                      <CheckBox\r\n                                        style={{ color: color.secondColor }}\r\n                                      />\r\n                                    }\r\n                                    icon={\r\n                                      <CheckBoxOutlineBlank\r\n                                        style={{ color: color.secondColor }}\r\n                                      />\r\n                                    }\r\n                                    checked={formik.values.rooms[\r\n                                      index\r\n                                    ].amenities.includes(amenity)}\r\n                                  />\r\n                                  {amenityIcons[amenity] && (\r\n                                    <ListItemIcon\r\n                                      style={{ color: color.secondColor }}\r\n                                    >\r\n                                      {amenityIcons[amenity]}\r\n                                    </ListItemIcon>\r\n                                  )}\r\n                                  <ListItemText primary={amenity} />\r\n                                </MenuItem>\r\n                              ))}\r\n                            </Select>\r\n                          </FormControl>\r\n                          {formik.touched.rooms?.[index]?.amenities &&\r\n                            formik.touched.rooms?.[index]?.amenities &&\r\n                            Array.isArray(formik.errors.rooms) &&\r\n                            (\r\n                              formik.errors.rooms as FormikErrors<\r\n                                typeof formik.values.rooms\r\n                              >\r\n                            )[index]?.amenities && (\r\n                              <FormHelperText\r\n                                sx={{ color: \"#d32f2f\", pl: 2, mt: -1 }}\r\n                              >\r\n                                {formik.touched.rooms?.[index]?.amenities &&\r\n                                  Array.isArray(formik.errors.rooms) &&\r\n                                  (\r\n                                    formik.errors.rooms as FormikErrors<\r\n                                      typeof formik.values.rooms\r\n                                    >\r\n                                  )[index]?.amenities}\r\n                              </FormHelperText>\r\n                            )}\r\n                        </Grid>\r\n                        <Grid item xs={12} md={12}>\r\n                          <ImageUploader\r\n                            label=\"Room Image\"\r\n                            onFileSelect={(file) =>\r\n                              handleFileChange(file as File, (value) =>\r\n                                formik.setFieldValue(\r\n                                  `rooms.${index}.roomImage`,\r\n                                  value\r\n                                )\r\n                              )\r\n                            }\r\n                          />\r\n                          {formik.touched.rooms?.[index]?.roomImage &&\r\n                            formik.touched.rooms?.[index]?.roomImage &&\r\n                            Array.isArray(formik.errors.rooms) &&\r\n                            (\r\n                              formik.errors.rooms as FormikErrors<\r\n                                typeof formik.values.rooms\r\n                              >\r\n                            )[index]?.roomImage && (\r\n                              <FormHelperText\r\n                                sx={{ color: \"#d32f2f\", pl: 2, mt: -1 }}\r\n                              >\r\n                                {formik.touched.rooms?.[index]?.roomImage &&\r\n                                  Array.isArray(formik.errors.rooms) &&\r\n                                  (\r\n                                    formik.errors.rooms as FormikErrors<\r\n                                      typeof formik.values.rooms\r\n                                    >\r\n                                  )[index]?.roomImage}\r\n                              </FormHelperText>\r\n                            )}\r\n                        </Grid>\r\n                      </Grid>\r\n                    ))} */}\r\n\r\n                    {formik.values.rooms.map((room: any, index: number) => {\r\n                      // Type-safe error helper\r\n                      const getFieldProps = <T extends keyof Room>(field: T) => {\r\n                        const touched = Array.isArray(formik.touched.rooms) ? formik.touched.rooms[index]?.[field] : false;\r\n                        const error = Array.isArray(formik.errors.rooms) ? (formik.errors.rooms[index] as Record<string, string>)?.[field] : undefined;\r\n\r\n                        return {\r\n                          touched,\r\n                          error,\r\n                          fieldProps: formik.getFieldProps(`rooms.${index}.${field}`),\r\n                        };\r\n                      };\r\n\r\n                      return (\r\n                        <Grid container spacing={2} key={index} alignItems=\"center\" mb={2} px={2}>\r\n                          {/* Room header */}\r\n                          <Grid\r\n                            style={{ paddingLeft: \"30px\" }}\r\n                            item\r\n                            xs={12}\r\n                            md={12}\r\n                            display={\"flex\"}\r\n                            justifyContent={\"space-between\"}\r\n                            alignItems={\"center\"}\r\n                            width={\"100%\"}\r\n                            fontSize={\"18px\"}\r\n                            fontWeight={\"bold\"}\r\n                            mb={-1}\r\n                          >\r\n                            {formik.values.rooms.length > 1 && <>Room {index + 1}</>}\r\n                            {formik.values.rooms.length > 1 && (\r\n                              <IconButton sx={{ color: color.firstColor }} onClick={() => arrayHelpers.remove(index)}>\r\n                                <Delete />\r\n                              </IconButton>\r\n                            )}\r\n                          </Grid>\r\n\r\n                          {/* Room Category */}\r\n                          <Grid item xs={12} md={3}>\r\n                            <CustomTextField\r\n                              fullWidth\r\n                              select\r\n                              label=\"Room Category\"\r\n                              {...getFieldProps('roomCategory').fieldProps}\r\n                              error={Boolean(getFieldProps('roomCategory').touched && getFieldProps('roomCategory').error)}\r\n                              helperText={getFieldProps('roomCategory').touched && getFieldProps('roomCategory').error}\r\n                              SelectProps={{\r\n                                renderValue: (selected) => {\r\n                                  const selectedRoom = roomTypes.find((room) => room.value === selected);\r\n                                  return selectedRoom ? selectedRoom.label : \"\";\r\n                                },\r\n                              }}\r\n                            >\r\n                              {roomTypes.map((room) => (\r\n                                <MenuItem key={room.value} value={room.value}>\r\n                                  <div>\r\n                                    <Typography variant=\"body1\" fontWeight=\"bold\">\r\n                                      {room.label}\r\n                                    </Typography>\r\n                                    <Typography variant=\"body2\" color=\"textSecondary\">\r\n                                      {room.details}\r\n                                    </Typography>\r\n                                  </div>\r\n                                </MenuItem>\r\n                              ))}\r\n                            </CustomTextField>\r\n                          </Grid>\r\n\r\n                          {/* Room Size */}\r\n                          <Grid item xs={12} md={3}>\r\n                            <CustomTextField\r\n                              fullWidth\r\n                              label=\"Room Size (in sqft)\"\r\n                              {...getFieldProps('roomSize').fieldProps}\r\n                              error={Boolean(getFieldProps('roomSize').touched && getFieldProps('roomSize').error)}\r\n                              helperText={getFieldProps('roomSize').touched && getFieldProps('roomSize').error}\r\n                            />\r\n                          </Grid>\r\n\r\n                          {/* Available Rooms */}\r\n                          <Grid item xs={12} md={3}>\r\n                            <CustomTextField\r\n                              fullWidth\r\n                              label=\"Available Rooms\"\r\n                              {...getFieldProps('numberOfRoomsAvailable').fieldProps}\r\n                              error={Boolean(getFieldProps('numberOfRoomsAvailable').touched && getFieldProps('numberOfRoomsAvailable').error)}\r\n                              helperText={getFieldProps('numberOfRoomsAvailable').touched && getFieldProps('numberOfRoomsAvailable').error}\r\n                            />\r\n                          </Grid>\r\n\r\n                          {/* Conditional Rate Fields */}\r\n                          {formik.values.stayType === \"overnight\" ? (\r\n                            <Grid item xs={12} md={3}>\r\n                              <CustomTextField\r\n                                fullWidth\r\n                                label=\"Rate for 1 Night\"\r\n                                {...getFieldProps('rateFor1Night').fieldProps}\r\n                                error={Boolean(getFieldProps('rateFor1Night').touched && getFieldProps('rateFor1Night').error)}\r\n                                helperText={getFieldProps('rateFor1Night').touched && getFieldProps('rateFor1Night').error}\r\n                              />\r\n                            </Grid>\r\n                          ) : (\r\n                            <>\r\n                              <Grid item xs={12} md={3}>\r\n                                <CustomTextField\r\n                                  fullWidth\r\n                                  label=\"Rate for 3 Hour Slot\"\r\n                                  {...getFieldProps('rateFor3Hour').fieldProps}\r\n                                  error={Boolean(getFieldProps('rateFor3Hour').touched && getFieldProps('rateFor3Hour').error)}\r\n                                  helperText={getFieldProps('rateFor3Hour').touched && getFieldProps('rateFor3Hour').error}\r\n                                />\r\n                              </Grid>\r\n\r\n                              {/* Repeat for other hourly rates (6, 9, 12, 24) */}\r\n                              <Grid item xs={12} md={3}>\r\n                                <CustomTextField\r\n                                  fullWidth\r\n                                  label=\"Rate for 6 Hour Slot\"\r\n                                  {...getFieldProps('rateFor6Hour').fieldProps}\r\n                                  error={Boolean(getFieldProps('rateFor6Hour').touched && getFieldProps('rateFor6Hour').error)}\r\n                                  helperText={getFieldProps('rateFor6Hour').touched && getFieldProps('rateFor6Hour').error}\r\n                                />\r\n                              </Grid>\r\n                              <Grid item xs={12} md={3}>\r\n                                <CustomTextField\r\n                                  fullWidth\r\n                                  label=\"Rate for 12 Hour Slot\"\r\n                                  {...getFieldProps('rateFor12Hour').fieldProps}\r\n                                  error={Boolean(getFieldProps('rateFor12Hour').touched && getFieldProps('rateFor12Hour').error)}\r\n                                  helperText={getFieldProps('rateFor12Hour').touched && getFieldProps('rateFor12Hour').error}\r\n                                />\r\n                              </Grid>\r\n\r\n                              {/* Continue with 9, 12, 24 hour slots... */}\r\n                            </>\r\n                          )}\r\n\r\n                          {/* Additional Rates */}\r\n                          <Grid item xs={12} md={3}>\r\n                            <CustomTextField\r\n                              fullWidth\r\n                              label=\"Additional Guest Rate\"\r\n                              {...getFieldProps('additionalGuestRate').fieldProps}\r\n                              error={Boolean(getFieldProps('additionalGuestRate').touched && getFieldProps('additionalGuestRate').error)}\r\n                              helperText={getFieldProps('additionalGuestRate').touched && getFieldProps('additionalGuestRate').error}\r\n                            />\r\n                          </Grid>\r\n\r\n                          <Grid item xs={12} md={3}>\r\n                            <CustomTextField\r\n                              fullWidth\r\n                              label=\"Additional Child Rate\"\r\n                              {...getFieldProps('additionalChildRate').fieldProps}\r\n                              error={Boolean(getFieldProps('additionalChildRate').touched && getFieldProps('additionalChildRate').error)}\r\n                              helperText={getFieldProps('additionalChildRate').touched && getFieldProps('additionalChildRate').error}\r\n                            />\r\n                          </Grid>\r\n\r\n                          {/* Occupancy Fields */}\r\n                          <Grid item xs={12} md={3}>\r\n                            <CustomTextField\r\n                              fullWidth\r\n                              label=\"Standard Room Occupancy\"\r\n                              {...getFieldProps('standardRoomOccupancy').fieldProps}\r\n                              error={Boolean(getFieldProps('standardRoomOccupancy').touched && getFieldProps('standardRoomOccupancy').error)}\r\n                              helperText={getFieldProps('standardRoomOccupancy').touched && getFieldProps('standardRoomOccupancy').error}\r\n                            />\r\n                          </Grid>\r\n\r\n                          <Grid item xs={12} md={3}>\r\n                            <CustomTextField\r\n                              fullWidth\r\n                              label=\"Max Room Occupancy\"\r\n                              {...getFieldProps('maxRoomOccupancy').fieldProps}\r\n                              error={Boolean(getFieldProps('maxRoomOccupancy').touched && getFieldProps('maxRoomOccupancy').error)}\r\n                              helperText={getFieldProps('maxRoomOccupancy').touched && getFieldProps('maxRoomOccupancy').error}\r\n                            />\r\n                          </Grid>\r\n\r\n                          {/* Other Fields */}\r\n                          <Grid item xs={12} md={3}>\r\n                            <CustomTextField\r\n                              fullWidth\r\n                              label=\"Number of Free Children\"\r\n                              {...getFieldProps('numberOfFreeChildren').fieldProps}\r\n                              error={Boolean(getFieldProps('numberOfFreeChildren').touched && getFieldProps('numberOfFreeChildren').error)}\r\n                              helperText={getFieldProps('numberOfFreeChildren').touched && getFieldProps('numberOfFreeChildren').error}\r\n                            />\r\n                          </Grid>\r\n\r\n                          <Grid item xs={12} md={3}>\r\n                            <CustomTextField\r\n                              fullWidth\r\n                              label=\"Tax Rate\"\r\n                              {...getFieldProps('tax').fieldProps}\r\n                              error={Boolean(getFieldProps('tax').touched && getFieldProps('tax').error)}\r\n                              helperText={getFieldProps('tax').touched && getFieldProps('tax').error}\r\n                            />\r\n                          </Grid>\r\n\r\n                          <Grid item xs={12} md={3}>\r\n                            <CustomTextField\r\n                              fullWidth\r\n                              label=\"Extra Fees\"\r\n                              {...getFieldProps('extraFees').fieldProps}\r\n                              error={Boolean(getFieldProps('extraFees').touched && getFieldProps('extraFees').error)}\r\n                              helperText={getFieldProps('extraFees').touched && getFieldProps('extraFees').error}\r\n                            />\r\n                          </Grid>\r\n\r\n                          {/* Amenities */}\r\n                          <Grid item xs={12} md={3}>\r\n                            <FormControl fullWidth sx={{ ...inputSx, mb: 1 }}>\r\n                              <InputLabel sx={{ color: color.firstColor }}>Amenities</InputLabel>\r\n                              <Select\r\n                                style={{ border: \"none\" }}\r\n                                multiple\r\n                                {...formik.getFieldProps(`rooms.${index}.amenities`)}\r\n                                renderValue={(selected: string[]) => selected.join(\", \")}\r\n                              >\r\n                                {amenitiesOptions.map((amenity) => (\r\n                                  <MenuItem key={amenity} value={amenity}>\r\n                                    <Checkbox\r\n                                      checked={formik.values.rooms[index].amenities.includes(amenity)}\r\n                                    />\r\n                                    {amenityIcons[amenity] && (\r\n                                      <ListItemIcon>{amenityIcons[amenity]}</ListItemIcon>\r\n                                    )}\r\n                                    <ListItemText primary={amenity} />\r\n                                  </MenuItem>\r\n                                ))}\r\n                              </Select>\r\n                            </FormControl>\r\n                          </Grid>\r\n\r\n                          {/* Room Image Upload */}\r\n                          <Grid item xs={12} md={12}>\r\n                            <ImageUploader\r\n                              label=\"Room Image\"\r\n                              onFileSelect={(file) =>\r\n                                handleFileChange(file as File, (value) =>\r\n                                  formik.setFieldValue(`rooms.${index}.roomImage`, value)\r\n                                )\r\n                              }\r\n                            />\r\n                          </Grid>\r\n                        </Grid>\r\n                      );\r\n                    })}\r\n\r\n                    <Grid\r\n                      item\r\n                      xs={12}\r\n                      md={12}\r\n                      mb={2}\r\n                      display={\"flex\"}\r\n                      alignItems={\"flex-end\"}\r\n                      justifyContent={\"flex-end\"}\r\n                    >\r\n                      <CustomButton\r\n                        customStyles={{\r\n                          fontSize: \"14px\",\r\n                        }}\r\n                        variant=\"contained\"\r\n                        startIcon={<Add />}\r\n                        onClick={() =>\r\n                          arrayHelpers.push({\r\n                            roomCategory: \"\",\r\n                            rateFor3Hour: \"\",\r\n                            rateFor6Hour: \"\",\r\n                            rateFor9Hour: \"\",\r\n                            rateFor12Hour: \"\",\r\n                            rateFor24Hour: \"\",\r\n                            additionalGuestRate: \"\",\r\n                            additionalChildRate: \"\",\r\n                            standardRoomOccupancy: \"\",\r\n                            maxRoomOccupancy: \"\",\r\n                            numberOfFreeChildren: \"\",\r\n                            amenities: [],\r\n                          })\r\n                        }\r\n                      >\r\n                        Add Room\r\n                      </CustomButton>\r\n                    </Grid>\r\n                  </>\r\n                )}\r\n              />\r\n\r\n              <Grid item xs={12}>\r\n                <CustomButton\r\n                  customStyles={{ margin: \"auto\", display: \"block\" }}\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                // onClick={() => {\r\n                //   // Force validation\r\n                //   formik.validateForm().then(errors => {\r\n                //     console.log(\"Form errors:\", errors);\r\n                //     if (Object.keys(errors).length === 0) {\r\n                //       formik.submitForm();\r\n                //     } else {\r\n                //       toast.error(\"Please fix the form errors\");\r\n                //     }\r\n                //   });\r\n                // }}\r\n                >\r\n                  {isEditMode ? \"Save Changes\" : \"Submit Application\"}\r\n                </CustomButton>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </FormikProvider>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PropertyForm;\r\n"],"names":["amenityIcons","_jsx","PoolIcon","fontSize","Gym","FitnessCenterIcon","WifiIcon","BeachAccessIcon","Breakfast","FreeBreakfastIcon","Parking","LocalParkingIcon","Spa","SpaIcon","Restaurant","LocalDiningIcon","AirportShuttleIcon","BusinessCenterIcon","PetsIcon","Bar","LocalBarIcon","RoomServiceIcon","TV","TvIcon","AcUnitIcon","LocalLaundryServiceIcon","ChildCareIcon","KingBedIcon","Casino","CasinoIcon","DirectionsCarIcon","NightlifeIcon","SportsTennisIcon","OutdoorGrillIcon","FireExtinguisherIcon","amenitiesOptions","roomTypes","value","label","details","BoxStyle","p","px","boxShadow","borderRadius","my","BpRadio","props","Radio","style","padding","disableRipple","color","checkedIcon","BpCheckedIcon","icon","BpIcon","styled","_ref","theme","width","height","backgroundColor","backgroundImage","outline","outlineOffset","applyStyles","background","secondColor","display","content","StyledLabel","FormControlLabel","_ref2","checked","thirdColor","firstColor","alignItems","transition","paddingLeft","marginLeft","paddingRight","CustomRadio","CustomNextArrow","onClick","IconButton","sx","position","right","top","transform","zIndex","children","ArrowForwardIos","CustomTextField","TextField","marginBottom","border","LoginTextField","useScreenSize","useTheme","isBelow400px","useMediaQuery","breakpoints","down","inputSx","marginTop","boxSizing","borderBottom","borderColor","ImageGrid","_ref3","propertyImages","maxImages","Math","min","length","displayImages","slice","hasMore","open","setOpen","useState","isMobile","_jsxs","Box","xs","md","gap","gridTemplateColumns","gridTemplateRows","objectFit","gridColumn","gridRow","src","alt","map","index","bottom","textAlign","cursor","Typography","variant","Modal","onClose","left","bgcolor","overflowY","mb","Close","img","RoomAmenities","_ref4","room","showAll","setShowAll","displayedAmenities","amenities","halfIndex","ceil","firstColumn","secondColumn","_Fragment","mt","Grid","container","spacing","column","colIndex","item","List","disablePadding","amenity","isLastItem","ListItem","py","flexWrap","ListItemIcon","minWidth","FiberManualRecord","ListItemText","margin","primary","primaryTypographyProps","Button","textTransform","ml","fontWeight","ExpandLess","ExpandMore","getRatingText","rating","getRatingColor","onFileSelect","multiple","maxFiles","maxSize","selectedFiles","setSelectedFiles","previews","setPreviews","error","setError","handleDrop","useCallback","acceptedFiles","fileRejections","newPreviews","file","URL","createObjectURL","prev","getRootProps","getInputProps","isDragActive","useDropzone","onDrop","accept","CloudUploadIcon","Alert","severity","size","e","stopPropagation","updatedFiles","filter","_","i","updatedPreviews","handleDelete","DeleteIcon","validationSchema","Yup","shape","propertyName","trim","max","required","propertyType","propertyDescription","ownerMobile","matches","ownerEmail","email","receptionMobile","receptionEmail","address","city","state","pincode","landmark","googleBusinessPage","url","gstNo","panNo","gstCertificate","panCard","of","bankaccountNo","bankname","propertyPolicies","stayType","rooms","roomSize","rateFor1Night","typeError","when","is","then","schema","otherwise","notRequired","rateFor3Hour","rateFor6Hour","rateFor12Hour","additionalGuestRate","additionalChildRate","standardRoomOccupancy","maxRoomOccupancy","numberOfFreeChildren","numberOfRoomsAvailable","tax","extraFees","PropertyForm","previewImage","setPreviewImage","uploading","setUploading","handleFileChange","async","setFieldValue","formData","FormData","append","_res$data","_res$data$data","res","docsUpload","uploadedUrl","data","doc0","console","navigate","useNavigate","sanitizeValue","id","useLocation","hotelData","setHotelData","useEffect","getMyAllHotelswithBelongsTo","secondTable","_res$data3","_res$data3$data","isEditMode","initialValues","useMemo","_hotelData$romms","_hotelData$romms$","_hotelData$rooms","_hotelData$rooms2","propertyDesc","bankAccountNumber","bankName","ifsccode","bankIfsc","bankpassbook","bankPassbook","gstCertificateImage","panCardImage","propertyServices","extraService","propertyPolicy","romms","coupleFriendly","businessFriendly","familyFriendly","petFriendly","roomCategory","rateFor9Hour","rateFor24Hour","availableRooms","extrafees","taxRate","roomImage","formik","useFormik","enableReinitialize","onSubmit","values","log","payLoad","userId","getUserId","status","editpayLoad","editHotel","_res$data4","status_code","roomUpdates","roomPayload","hotelId","roomImages","editRoom","roomResponse","Promise","all","toast","success","hotelPost","_res$data5","_res$data5$data","_res$data6","_res$data6$data","roomPost","_res$data7","msg","catch","err","minHeight","backgroundSize","backgroundPosition","flexDirection","pb","FormikProvider","handleSubmit","fullWidth","getFieldProps","touched","Boolean","errors","helperText","undefined","select","MenuItem","resize","multiline","rows","placeholder","onChange","target","replace","ImageUploader","name","feature","justifyContent","RadioGroup","row","option","mr","control","charAt","toUpperCase","files","uploadedUrls","_res$data2","_res$data2$data","push","handleFileChange1","FieldArray","render","arrayHelpers","field","_formik$touched$rooms","_formik$errors$rooms$","Array","isArray","fieldProps","remove","Delete","SelectProps","renderValue","selected","selectedRoom","find","FormControl","InputLabel","Select","join","Checkbox","includes","CustomButton","customStyles","startIcon","Add","type"],"sourceRoot":""}